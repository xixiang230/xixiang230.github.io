<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>云梦泽</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xixiang230.github.io/"/>
  <updated>2018-01-02T14:56:17.211Z</updated>
  <id>http://xixiang230.github.io/</id>
  
  <author>
    <name>yunmengze</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ZooKeeper源码阅读之服务启动</title>
    <link href="http://xixiang230.github.io/2018/01/02/ZooKeeper%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8B%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
    <id>http://xixiang230.github.io/2018/01/02/ZooKeeper源码阅读之服务启动/</id>
    <published>2018-01-02T14:17:22.000Z</published>
    <updated>2018-01-02T14:56:17.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>分布式系统本质上来说就是不同节点上的进程并发执行，并且相互之间对进程的行为进行协调处理的过程。不同节点上的进程互相协调行为的过程叫做分布式同步。许多分布式系统都需要一个进程来作为任务的协调者，执行一些其它进程并不执行的特殊操作，自动选举出一个协调者的过程就是分布式选举，Zookeeper正是为了解决这一系列问题。</p><h1 id="ZK服务启动"><a href="#ZK服务启动" class="headerlink" title="ZK服务启动"></a>ZK服务启动</h1><p>Zk服务的启动方式有：单机模式，伪分布式模式，分布式模式。</p><h1 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h1><p>单机模式意味着只有一台机器，流程简单，通过读物conf目录下的zoo.cfg配置文件启动。几个重要参数：</p><ol><li>tickTime：用于ZK服务端和客户端的会话控制，包括心跳，一般会话超时时间为该值得两倍，单位为毫秒。</li><li>dataDir：该目录用来存放数据库的镜像和操作数据库的日志。</li><li>clientPort：ZK服务端监听客户端的端口，默认2181。<br>ZK服务启动后，可通过ps或jps命令查看。<br>也可以通过启动脚本自带参数status来查看ZK进程状态<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkServer.sh status</span><br></pre></td></tr></table></figure></li></ol><p>ZK服务运行后，可以通过命令行工具访问之<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./zkCli.sh -server localhost:2181</span><br></pre></td></tr></table></figure></p><h1 id="分布式模式"><a href="#分布式模式" class="headerlink" title="分布式模式"></a>分布式模式</h1><p>多台ZK机器构成一个集群，集群内的所有机器成为quorum。集群最小配置为3台，最佳配置为5台。其中1台为Leader，另外4台为Follower，一旦Leader宕机，剩余的Follower就会重新选举出Leader。<br>分布式字段</p><ul><li>initLimit：follower对于leader的初始化连接timeout时间；</li><li>syncLimit：follower对于leader的同步timeout时间</li><li>timeout的计算公式为：initLimit<em>tickTime，syncLimit</em>tickTime<br>另外，对于配置：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server.ID=node1:port1:port2</span><br></pre></td></tr></table></figure></li></ul><p>其中port1用于follower和leader之间的通信，采用TCP方式，port2用于选举leader用。</p><h1 id="流程源码解释"><a href="#流程源码解释" class="headerlink" title="流程源码解释"></a>流程源码解释</h1><p>ZK的启动由zkServer.sh发起，真正的起源是Java类QuorumPeerMain，然后进行一系列配置后启动负责ZK服务的线程。</p><h2 id="zkServer-sh"><a href="#zkServer-sh" class="headerlink" title="zkServer.sh"></a>zkServer.sh</h2><p>这个脚本有好几种参数选择，包括start，start-foregroud，print-cmd，stop等<br>对于start方法，脚本使用nohup命令提交作业</p><h2 id="QuorumPeerMain"><a href="#QuorumPeerMain" class="headerlink" title="QuorumPeerMain"></a>QuorumPeerMain</h2><p>QuorumPeerMain类的Main函数很简单，直接调用initializeAndRun方法，参数即为zkServer.sh传入的参数，比如“start”，在initializeAndRun方法内部，首先启动的是定时清除镜像任务，默认设置为保留3分，由于<br>purgeInterval 这个参数默认设置为 0，所以不会启动镜像定时清除机制<br>接下来，如果配置的 ZooKeeper 服务器大于 1 台，调用 runFromConfig<br>方法进行集群信息配置，并启动 QuorumPeer 线程。<br>每个 QuorumPeer 线程启动之前都会先启动一个 cnxnFactory 线程，首先初始化<br>ServerCnxnFactory，这个是用来接收来自客户端的连接的，也就是这里启动的是一个 TCP<br>服务器。在 ZooKeeper 里提供两种 TCP 服务器的实现，一个是使用 Java 原生 NIO<br>的方式，另外一个是使用 NETTY。默认是 NIO 的方式，一个典型的 Reactor 模型，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;分布式系统本质上来说就是不同节点上的进程并发执行，并且相互之间对进程的行为进行协调处理的过程。不同节点上的进程互相协调行为的过程叫做分布式同
      
    
    </summary>
    
    
      <category term="zookeeper" scheme="http://xixiang230.github.io/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>logstash过滤器</title>
    <link href="http://xixiang230.github.io/2018/01/01/logstash%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://xixiang230.github.io/2018/01/01/logstash过滤器/</id>
    <published>2018-01-01T14:36:32.000Z</published>
    <updated>2018-01-01T15:02:28.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="grok正则捕获"><a href="#grok正则捕获" class="headerlink" title="grok正则捕获"></a>grok正则捕获</h1><p>grok是logstash最重要的插件，可以在grok里预定义好命名正则表达式，并在后面的处理中引用之。<br>下面是给配置文件添加一个过滤器区段的配置。配置要添加在输入和输出区段之间，虽然说logstash执行区段的时候并不依赖于书写时的次序，不过为了看得方便，尽量按次序书写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">input &#123;stdin&#123;&#125;&#125;</span><br><span class="line">filter &#123;</span><br><span class="line">  grok  &#123;</span><br><span class="line">    match =&gt; &#123;</span><br><span class="line">        &quot;message&quot; =&gt; &quot;\s+(?&lt;request_time&gt;\d+(?:\.\d+)?\s+&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;stdout&#123;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>运行logstash进程然后输入”begin 123.456 end”，将会看到类似如下输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    “message&quot; =&gt; &quot;begin 123.456 end&quot;,</span><br><span class="line">    &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; &quot;2014-08-09T11:55:32.186Z&quot;,</span><br><span class="line">    &quot;host&quot; =&gt; &quot;host&quot;,</span><br><span class="line">    &quot;request_time&quot; =&gt; &quot;123.456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面输出结果美中不足的地方是request_time应该是数值而不是字符串。不过我们有办法来做字段值类型转换。</p><h1 id="grok表达式语法"><a href="#grok表达式语法" class="headerlink" title="grok表达式语法"></a>grok表达式语法</h1><p>grok支持把预定义的grok表达式写入到文件，在新版的logstash里，pattern目录已经为空，示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USERNAME [a-zA-Z0-9._-]+</span><br><span class="line">USER %&#123;USERNAME&#125;</span><br></pre></td></tr></table></figure></p><p>上面第一行为用普通的正则表达式来定义一个grok表达式；<br>第二行，通过打印赋值格式，用前面定义好的grok表达式来定义另一个grok表达式。<br>grok表达式的打印复制格式的完整语法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%&#123;pattern_name:capture_name:data_type&#125;</span><br></pre></td></tr></table></figure></p><p>data_type当前只支持int和float。<br>现在，我们可以改进前面的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123;</span><br><span class="line">            &quot;message&quot; =&gt; &quot;%&#123;WORD:request_time:float&#125; %&#123;WORD&#125;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新运行进程后结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;message&quot; =&gt; &quot;begin 123.456&quot;,</span><br><span class="line">    &quot;@version&quot; =&gt; &quot;1&quot;,</span><br><span class="line">    &quot;@timestamp&quot; =&gt; &quot;2014-08-09T12:23:36.634Z&quot;</span><br><span class="line">    &quot;host&quot; =&gt; &quot;host&quot;,</span><br><span class="line">    &quot;request_time =&gt; 123.456</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在，request_time就是数值类型了。</p><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>实际运用中，需要处理各种各样的日志文件，如果都是在配置文件里各自些一行自己的表达式，就难以管理了，所以建议把所有的grok表达式统一写入到一个地方，然后用filter/grok的patterns_dir选项来指明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;grok正则捕获&quot;&gt;&lt;a href=&quot;#grok正则捕获&quot; class=&quot;headerlink&quot; title=&quot;grok正则捕获&quot;&gt;&lt;/a&gt;grok正则捕获&lt;/h1&gt;&lt;p&gt;grok是logstash最重要的插件，可以在grok里预定义好命名正则表达式，并在后面的处
      
    
    </summary>
    
    
      <category term="logstash" scheme="http://xixiang230.github.io/tags/logstash/"/>
    
  </entry>
  
  <entry>
    <title>MySQL性能优化总结</title>
    <link href="http://xixiang230.github.io/2018/01/01/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <id>http://xixiang230.github.io/2018/01/01/MySQL性能优化总结/</id>
    <published>2018-01-01T00:45:35.000Z</published>
    <updated>2018-01-01T00:59:33.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为查询缓存而优化你的查询"><a href="#为查询缓存而优化你的查询" class="headerlink" title="为查询缓存而优化你的查询"></a>为查询缓存而优化你的查询</h1><p>开启MySQL服务器的查询缓存是提高性能最有效的方式之一。当有很多相同查询呗执行了多次时，这些查询结果会被放到一个缓存里，后续的相同查询就不用操作表而变成直接访问缓存结果了。</p><p>但问题是某些查询语句会让MySQL不使用缓存，这是我们要注意的。例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 查询缓存不开启</span><br><span class="line">$r = mysql_query(&apos;SELECT username FROM tb WHERE sigdate &gt;= CURDATE()&apos;);</span><br><span class="line">// 开启查询缓存</span><br><span class="line">$today = date(&quot;Y-m-d&quot;);</span><br><span class="line">$r = mysql_query(&quot;SELECT username FROM tb WHERE sigdate &gt;= &apos;$today&apos;&quot;);</span><br></pre></td></tr></table></figure></p><p>上面两条SQL语句差别在于CURDATE()函数的使用，MySQL的查询缓存对这个函数不起作用，像NOW()、RAND()或是其它类似SQL函数都不会开启查询缓存，因为这些函数的返回值是不定的，是易变的，所以你需要用个变量来代替MySQL的函数，从而开启缓存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;为查询缓存而优化你的查询&quot;&gt;&lt;a href=&quot;#为查询缓存而优化你的查询&quot; class=&quot;headerlink&quot; title=&quot;为查询缓存而优化你的查询&quot;&gt;&lt;/a&gt;为查询缓存而优化你的查询&lt;/h1&gt;&lt;p&gt;开启MySQL服务器的查询缓存是提高性能最有效的方式之一。当
      
    
    </summary>
    
    
      <category term="MySQL" scheme="http://xixiang230.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>TRUNK介绍</title>
    <link href="http://xixiang230.github.io/2018/01/01/TRUNK%E4%BB%8B%E7%BB%8D/"/>
    <id>http://xixiang230.github.io/2018/01/01/TRUNK介绍/</id>
    <published>2018-01-01T00:16:09.000Z</published>
    <updated>2018-01-01T00:41:01.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>VLAN的作用是<strong>分割广播域</strong>，处于不同VLAN的端口在二层是无法通信的，而两台交换机上处于同一VLAN间的端口要想通信，需要用线连接起来，一台交换机上VLAN最多可以设定4000多个，两台交换机之间当然不可能连4000多跟线了。</p><h1 id="trunk"><a href="#trunk" class="headerlink" title="trunk"></a>trunk</h1><p>为了解决上面问题，可以用一根<strong>骨干链路trunk</strong>来连接两台交换机，实现让两台交换机上处于相同VLAN的端口能相互通信，trunk上用特定的封装方式来支持转发不同VLAN的帧，封装主要是因为trunk上是允许转发不同VLAN的帧，所以需要打上特殊标记来区分帧到底属于哪个VLAN。比如，收到VLAN2的帧后会打上VLAN2的标记，通过trunk链路转发出去，对方交换机收到帧后，发现是VLAN2的帧，就讲VLAN2的标记去掉后发送到VLAN2的端口，实现相同VLAN在不同交换机间的通信。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><img src="https://github.com/xixiang230/xixiang230.github.io/blob/master/images/trunk.jpg?raw=true" alt="trunk"><br>上图两台交换机的f0/1口配置为VLAN2，f0/0口配置成trunk接口，这样R1和R2就相当于直连可以互相ping通。R1发出的包，经过SW1在二层上呗打上VLAN2的标记，通过trunk链路转发到SW2，SW2去掉帧上的VLAN2的标记，经过VLAN2的端口即f0/1口发送到R2。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h1&gt;&lt;p&gt;VLAN的作用是&lt;strong&gt;分割广播域&lt;/strong&gt;，处于不同VLAN的端口在二层是无法通信的，而两台交换机上处于同一VLAN间的端
      
    
    </summary>
    
      <category term="网络" scheme="http://xixiang230.github.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="trunk" scheme="http://xixiang230.github.io/tags/trunk/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 学习</title>
    <link href="http://xixiang230.github.io/2017/12/31/hello-world/"/>
    <id>http://xixiang230.github.io/2017/12/31/hello-world/</id>
    <published>2017-12-31T14:59:55.614Z</published>
    <updated>2017-12-31T14:59:55.609Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hexo常用命令</title>
    <link href="http://xixiang230.github.io/2017/12/31/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://xixiang230.github.io/2017/12/31/Hexo常用命令/</id>
    <published>2017-12-31T13:37:12.592Z</published>
    <updated>2017-12-31T13:37:12.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li>hexo安装命令<br><code>npm install hexo -g</code>  <a id="more"></a></li><li><p>hexo升级<br><code>npm update hexo -g</code>  </p></li><li><p>hexo初始化目录<br><code>hexo init</code>  </p></li><li><p>创建新文章<br><code>hexo n</code>  </p></li><li><p>生成静态页面（需在init的目录下执行）<br><code>hexo g</code><br><code>hexo generate</code>  </p></li><li><p>部署<br><code>hexo d</code><br><code>hexo deploy</code>  </p></li><li><p>生成并部署<br><code>hexo d -g</code>  </p></li><li><p>本地启动，进行文章预览调试<br><code>hexo server</code><br><code>hexo s</code><br>输入<a href="http://localhost:4000即可查看本地预览效果" target="_blank" rel="noopener">http://localhost:4000即可查看本地预览效果</a>  </p></li><li><p>更改端口<br><code>hexo server -p 5000</code></p></li><li><p>清除缓存<br><code>hexo clean</code>  </p></li><li><p>创建新页面<br><code>hexo new page &quot;tags&quot;</code><br>此时在source下就多了一个tags目录，里面有个index.md文件，回到主题配置文件下，为memu项添加：<br><code>tags: /tags</code></p></li></ul><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2016-05-15 19:07：43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description: 生命在于折腾</span><br></pre></td></tr></table></figure><h1 id="部署设置"><a href="#部署设置" class="headerlink" title="部署设置"></a>部署设置</h1><p>修改 _config.yml为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">\#\# Docs: http://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git  </span><br><span class="line">  repository: git@github.com:xixiang230/xixiang230.github.io.git  </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><ol><li>找不到git部署<br><code>ERROR Deployer not found: git</code><br><strong>解决方法</strong><br><code>npm install hexo-deployer-git --save</code>  <h1 id="显示RSS"><a href="#显示RSS" class="headerlink" title="显示RSS"></a>显示RSS</h1></li></ol><ul><li>安装RSS插件<br><code>npm install hexo-generator-feed --save</code>  <h1 id="开启RSS功能"><a href="#开启RSS功能" class="headerlink" title="开启RSS功能"></a>开启RSS功能</h1>编辑hexo/_config.yml，添加如下代码<br>rss: /atom.xml  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本命令&quot;&gt;&lt;a href=&quot;#基本命令&quot; class=&quot;headerlink&quot; title=&quot;基本命令&quot;&gt;&lt;/a&gt;基本命令&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;hexo安装命令&lt;br&gt;&lt;code&gt;npm install hexo -g&lt;/code&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="Hexo" scheme="http://xixiang230.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令整理</title>
    <link href="http://xixiang230.github.io/2017/12/31/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://xixiang230.github.io/2017/12/31/Git常用命令整理/</id>
    <published>2017-12-31T13:37:12.592Z</published>
    <updated>2017-12-31T13:37:12.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h1><p>git一共有3个配置文件：一是仓库级配置文件，位于当前仓库下(./.git/config)；二是全局配置文件(~/.gitconfig)；三是系统级别配置文件（/etc/gitconfig)。  </p><p>对于git而言，各个配置文件的权重比较为：仓库 &gt; 全局 &gt; 系统。git使用这一系列的配置文件来存储个人偏好，在工作时首先查找/etc/gitconfig文件（系统级），其次查找~/.gitconfig文件（全局级），最后查找仓库下的配置文件.git/config(仓库级)，以上三层配置层层推进，如有冲突，会以最后一次为准。虽然可手动编辑配置，但使用git config命令更为便捷。</p><p>当安装git后首先要做的就是设置用户名和e-mail地址，因为git的每次提交都会使用这两个信息，嵌入到提交之中。  </p><ul><li><p>配置使用git仓库的人员姓名<br><code>git config --global user.name &quot;xixiang230&quot;</code></p></li><li><p>配置使用git仓库人员的email<br><code>git config --global user.email &quot;371524660@qq.com&quot;</code></p></li></ul><a id="more"></a><ul><li><p>打开用户git配置文件目录<br><code>vim ~/.gitconfig</code></p></li><li><p>查看git配置，列出git可以在该处找出的所有配置  (–list)<br><code>git config --list</code><br><code>git config -l</code>  </p></li><li><p>编辑git配置（–edit）<br><code>git config --local -e</code>  #编辑仓库级配置文件<br><code>git config --global -e</code> #编辑全局级配置文件<br><code>git config --system -e</code> #编辑系统级配置文件  </p></li><li><p>增加一个配置项(–add)<br><code>git config --add section.key value</code>  #(和前面一样，默认都操作local配置)<br>其中add选项后面section，key，value一项都不能少。<br><code>git config --add cat.name Tom</code>  </p></li><li><p>使用git查找特定关键字的有效值（–get）<br><code>git config --get section.key</code>     #（默认获取local配置中的内容）<br><code>git config --get cat.age</code><br>等效于<br><code>git config user.name</code>  </p></li><li><p>命令别名(git co 代替git checkout)<br><code>git config --global alias.co checkout</code>  </p></li></ul><blockquote><pre><code>通过git config 工具可获取和设置配置变量，这些变量可以控制Git的外观和操作。  --global选项，使得git config工具读写用户账户下的配置文件(~/.gitconfig)  --system选项，使得git config工具读写系统账户下的配置文件(/etc/gitconfig)--local选项或不带选项，使得git config工具读写当前仓库的配置文件(.git/config)  </code></pre></blockquote><ul><li><p>删除一个配置项（–unset）<br><code>git config [-local|--global|--sysytem] --unset section.key</code><br><code>git config --local --unset cat.name</code>  </p></li><li><p>配置编辑器<br><code>git config --global core.editor vim</code><br>git在需要输入一些消息时会使用该指定的文本编辑器。  </p></li><li><p>配置比较工具<br><code>git config --global merge.tool vimdiff</code>  </p></li></ul><hr><h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><ul><li>初始化一个版本仓库<br><code>git init</code>  </li></ul><hr><h1 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h1><ul><li>取消对文件的修改<br><code>git checkout -- readme.txt</code><br><code>git co --  &lt;file&gt;</code><br><code>git co .</code>  </li><li>获取远端分支<br><code>git checkout -b sf origin/serverfix</code>  </li><li><p>将工作文件修改提交到本地暂存区<br><code>git add &lt;file&gt;</code>  </p></li><li><p>将所有修改过的工作文件提交到暂存区<br><code>git add .</code>    </p></li></ul><hr><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><ul><li>从版本库中删除文件<br><code>git rm &lt;file&gt;</code>  </li><li>移除跟踪，但不删除文件<br><code>git rm --cached readme.txt</code>  </li></ul><hr><h1 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h1><ul><li>移动文件<br><code>git mv file_from file_to</code>  </li></ul><hr><h1 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff"></a>查看文件diff</h1><ul><li><p>比较当前文件和暂存区文件差异<br><code>git difff &lt;file&gt;</code><br><code>git diff</code>  </p></li><li><p>比较两次提交之间的差异<br><code>git diff &lt;$id1&gt; &lt;$id2&gt;</code>  </p></li><li><p>比较已暂存文件和上次提交文件的差异  </p><h2 id="git-diff-cached"><a href="#git-diff-cached" class="headerlink" title="git diff --cached  "></a><code>git diff --cached</code>  </h2><h1 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h1></li><li>查看提交的历史记录<br><code>git log</code><br><code>git log &lt;file&gt;</code>  </li><li>查看最近两次提交内容的差异<br><code>git log -p -2</code>  </li><li>简要显示增改行数统计<br><code>git log --stat</code>   </li></ul><hr><h1 id="取得Git仓库"><a href="#取得Git仓库" class="headerlink" title="取得Git仓库"></a>取得Git仓库</h1><ul><li><p>Clone远程版本库<br><code>git clone git@github.com:xixiang230/hello-word.git</code><br><code>git clone https://github.com/xixiang230/hello-word.git</code></p></li><li><p>为本地仓库添加一个远程仓库地址<br><code>git remote add origin git@github.com:xixiang230/hello-word.git</code>  </p></li><li><p>删除远程仓库<br><code>git remote rm &lt;repository&gt;</code>  </p></li><li><p>查看远程仓库，-v列出远程服务器地址和仓库名称<br><code>git remote -v</code><br>  git remote -v<br>  origin    git@github.com:xixiang230/blog.git (fetch)<br>  origin    git@github.com:xixiang230/blog.git (push)  </p><p>  git remote<br>  origin  </p></li><li><p>查看远程服务器仓库状态（显示远程信息）<br><code>git remote show origin</code>  </p></li><li><p>从远程仓库抓取数据(更新同步)<br><code>git fetch</code>  </p></li><li><p>抓取远程仓库所有分支更新并合并到本地<br><code>git pull</code>  </p></li><li><p>推送数据到远程仓库（把本地仓库master分支跟踪到远程分支）<br><code>git push origin master</code>  </p></li><li><p>push 所有分支<br><code>git push</code>  </p></li><li><p>查看远程仓库信息<br><code>git remote show origin</code>  </p></li><li><p>远程仓库的删除和重命名(pb改为paul)<br><code>git remote rename pb paul</code>  </p></li><li><p>修改远程分支地址<br><code>git remote set-url origin remote_git_address</code>  </p></li></ul><hr><h1 id="添加与提交"><a href="#添加与提交" class="headerlink" title="添加与提交"></a>添加与提交</h1><ul><li><p>添加当前目前下所有修改文件到暂存区<br><code>git add .</code><br><code>git add *.c</code>  #添加以.c为后缀的文件<br><code>git add file</code>  #添加指定文件或目录<br>git add 是将file的信息添加到git仓库的索引库中，并没有真正添加到库</p></li><li><p>提交修改到本地仓库<br><code>git commit -m &quot;message&quot;</code><br>git commit会将索引库中的内容向git仓库进行提交，这步之后文件file才真正提交到git仓库中。  </p></li><li><p>把已经跟踪的文件全部提交（添加并提交）<br><code>git commit -a -m &quot;message&quot;</code>  </p></li></ul><p>现在文件已经提交到本地仓库了，接下来需要推送到远程仓库   </p><ul><li>为本地仓库添加一个远程仓库（将本地仓库与远程仓库关联）<br><code>git remote add origin git@github.com:xixiang230/remote.git</code>  </li><li><p>推送更新到远程服务器(将本地master分支跟踪到远程分支)<br><code>git push origin master</code><br>在git仓库建立之初就有一个默认的master分支，如果建立了其他分支，也可用同样的方法跟踪。  </p></li><li><p>查看仓库当前的提交状态<br><code>git status</code>  </p></li></ul><hr><h1 id="取消暂存文件"><a href="#取消暂存文件" class="headerlink" title="取消暂存文件"></a>取消暂存文件</h1><ul><li><p>取消已经暂存的文件<br><code>git reset HEAD fileName</code>  </p></li><li><p>假设已经使用如下命令，将修改过的文件a,b添加到暂存区<br><code>git add .</code><br>现在只想提交a文件，不想提交b文件，执行如下命令<br><code>git reset HEAD b</code></p></li><li><p>从暂存区恢复到工作文件<br><code>git reset &lt;file&gt;</code><br><code>git reset -- .</code>  </p></li><li><p>恢复最近一次提交，即放弃上次提交后的所有本次修改<br><code>git reset --hard</code>  </p></li><li><p>取消对文件的修改，回滚到未修改状态<br><code>git checkout -- fileName</code></p></li><li><p>从暂存区恢复到工作文件<br><code>git reset &lt;file&gt;</code>  </p></li></ul><hr><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><ul><li>创建test分支<br><code>git branch test</code>  </li><li>切换到test分支<br><code>git checkout test</code>  </li><li>创建并切换到test分支<br><code>git checkout -b test</code>  </li><li>分支合并到当前分支<br><code>git merge hotfix</code>  </li></ul><hr><h1 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h1><ul><li>查看最后一次commit信息<br><code>git branch -v</code>  </li><li>筛选出已经/尚未与当前分支合并的分支<br><code>git branch --merged</code><br><code>git branch --no-merger</code>  </li><li>查看所有分支信息<br><code>git branch -r</code>  </li></ul><hr><h1 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h1><ul><li>删除test分支<br><code>git branch -D test</code>  </li></ul><hr><h1 id="git新建仓库操作流程"><a href="#git新建仓库操作流程" class="headerlink" title="git新建仓库操作流程"></a>git新建仓库操作流程</h1><ol><li><p>global用户配置信息设置<br> git config –global user.name “xixiang230”<br> git config –global user.emai “371524660@qq.com”  </p></li><li><p>新建仓库和关联<br> mkdir newrepository<br> cd new repository<br> git init           #  git本地初始化<br> touch README.md<br> git add README.md<br> git add .         #   将所有文件添加到版本控制系统<br> git commit -m “first commit”<br> git remote add origin git@github.com:xixiang230/newrepository.git   # 添加远程仓库<br> git push -u origin master   # 将本地版本库推送到远程仓库<br>第一次推送master分支时可加上-u参数，git不但会把本地master分支内容推送到远程新的master分支，还会把本地master分支和远程master分支关联起来，在之后的推送或拉取时简化命令。    </p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初始化配置&quot;&gt;&lt;a href=&quot;#初始化配置&quot; class=&quot;headerlink&quot; title=&quot;初始化配置&quot;&gt;&lt;/a&gt;初始化配置&lt;/h1&gt;&lt;p&gt;git一共有3个配置文件：一是仓库级配置文件，位于当前仓库下(./.git/config)；二是全局配置文件(~/.gitconfig)；三是系统级别配置文件（/etc/gitconfig)。  &lt;/p&gt;
&lt;p&gt;对于git而言，各个配置文件的权重比较为：仓库 &amp;gt; 全局 &amp;gt; 系统。git使用这一系列的配置文件来存储个人偏好，在工作时首先查找/etc/gitconfig文件（系统级），其次查找~/.gitconfig文件（全局级），最后查找仓库下的配置文件.git/config(仓库级)，以上三层配置层层推进，如有冲突，会以最后一次为准。虽然可手动编辑配置，但使用git config命令更为便捷。&lt;/p&gt;
&lt;p&gt;当安装git后首先要做的就是设置用户名和e-mail地址，因为git的每次提交都会使用这两个信息，嵌入到提交之中。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置使用git仓库的人员姓名&lt;br&gt;&lt;code&gt;git config --global user.name &amp;quot;xixiang230&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置使用git仓库人员的email&lt;br&gt;&lt;code&gt;git config --global user.email &amp;quot;371524660@qq.com&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="git" scheme="http://xixiang230.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>kubernetes apiServer启动分析</title>
    <link href="http://xixiang230.github.io/2017/10/09/kubernetes-apiServer%E5%90%AF%E5%8A%A8%E5%88%86%E6%9E%90/"/>
    <id>http://xixiang230.github.io/2017/10/09/kubernetes-apiServer启动分析/</id>
    <published>2017-10-09T15:03:14.000Z</published>
    <updated>2017-12-31T13:37:12.594Z</updated>
    
    <content type="html"><![CDATA[<p>src: /home/liuzekun/github/kubernetes/cmd/kube-apiserver/app/options/options.go</p><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><blockquote><p>&gt;<br>apiserver是K8S最重要的组成部分，不论是命令操作还是通过remote<br>API进行控制，实际都需要经过apiserver。<br>apiserver是k8s系统中所有对象的增删改查盯的http/restful式服务端，其中盯是指watch操作。数据最终存储在分布式一致的etcd存储内，apiserver本身是无状态的，提供了这些数据访问的认证鉴权、缓存、api版本适配转换等一系列的功能。<br>// Package options contains flags and options for initializing an apiserver<br>package options</p></blockquote><p>import (<br>    “net”<br>    “strings”<br>    “time”</p><pre><code>// 导入包时给包起别名utilnet &quot;k8s.io/apimachinery/pkg/util/net&quot;        genericoptions &quot;k8s.io/apiserver/pkg/server/options&quot;&quot;k8s.io/apiserver/pkg/storage/storagebackend&quot;&quot;k8s.io/kubernetes/pkg/api&quot;&quot;k8s.io/kubernetes/pkg/api/validation&quot;kubeoptions &quot;k8s.io/kubernetes/pkg/kubeapiserver/options&quot;kubeletclient &quot;k8s.io/kubernetes/pkg/kubelet/client&quot;&quot;k8s.io/kubernetes/pkg/master/ports&quot;&quot;k8s.io/kubernetes/pkg/master/reconcilers&quot;// add the kubernetes feature gates// _表只想执行一下某个代码包中的初始化函数，而不需要使用这个代码包中的任何程序实体_ &quot;k8s.io/kubernetes/pkg/features&quot;&quot;github.com/spf13/pflag&quot;</code></pre><p>)</p><p>// DefaultServiceNodePortRange is the default port range for NodePort services.<br>var DefaultServiceNodePortRange = utilnet.PortRange{Base: 30000, Size: 2768}</p><p>// ServerRunOptions runs a kubernetes api server.<br>type ServerRunOptions struct {<br>    GenericServerRunOptions <em>genericoptions.ServerRunOptions        //服务器通用的运行参数<br>    Etcd                    </em>genericoptions.EtcdOptions<br>    SecureServing           <em>genericoptions.SecureServingOptions<br>    InsecureServing         </em>kubeoptions.InsecureServingOptions<br>    Audit                   <em>genericoptions.AuditOptions<br>    Features                </em>genericoptions.FeatureOptions<br>    Admission               <em>genericoptions.AdmissionOptions<br>    Authentication          </em>kubeoptions.BuiltInAuthenticationOptions<br>    Authorization           <em>kubeoptions.BuiltInAuthorizationOptions<br>    CloudProvider           </em>kubeoptions.CloudProviderOptions<br>    StorageSerialization    <em>kubeoptions.StorageSerializationOptions<br>    APIEnablement           </em>kubeoptions.APIEnablementOptions</p><pre><code>AllowPrivileged           bool    // 是否配置超级权限，即运行Pod中运行的容器拥有系统特权EnableLogsHandler         boolEventTTL                  time.Duration  // 事件留存事件，默认1hKubeletConfig             kubeletclient.KubeletClientConfigKubernetesServiceNodePort intMaxConnectionBytesPerSec  int64ServiceClusterIPRange     net.IPNet // TODO: make this a listServiceNodePortRange      utilnet.PortRangeSSHKeyfile                stringSSHUser                   stringProxyClientCertFile stringProxyClientKeyFile  stringEnableAggregatorRouting boolMasterCount            intEndpointReconcilerType string</code></pre><p>}</p><p>// NewServerRunOptions creates a new ServerRunOptions object with default parameters<br>func NewServerRunOptions() *ServerRunOptions {<br>    s := ServerRunOptions{<br>        GenericServerRunOptions: genericoptions.NewServerRunOptions(),<br>        Etcd:                 genericoptions.NewEtcdOptions(storagebackend.NewDefaultConfig(kubeoptions.DefaultEtcdPathPrefix, api.Scheme, nil)),<br>        SecureServing:        kubeoptions.NewSecureServingOptions(),<br>        InsecureServing:      kubeoptions.NewInsecureServingOptions(),<br>        Audit:                genericoptions.NewAuditOptions(),<br>        Features:             genericoptions.NewFeatureOptions(),<br>        Admission:            genericoptions.NewAdmissionOptions(),<br>        Authentication:       kubeoptions.NewBuiltInAuthenticationOptions().WithAll(),<br>        Authorization:        kubeoptions.NewBuiltInAuthorizationOptions(),<br>        CloudProvider:        kubeoptions.NewCloudProviderOptions(),<br>        StorageSerialization: kubeoptions.NewStorageSerializationOptions(),<br>        APIEnablement:        kubeoptions.NewAPIEnablementOptions(),</p><pre><code>    EnableLogsHandler:      true,    EventTTL:               1 * time.Hour,    MasterCount:            1,    EndpointReconcilerType: string(reconcilers.MasterCountReconcilerType),    KubeletConfig: kubeletclient.KubeletClientConfig{        Port:         ports.KubeletPort,        ReadOnlyPort: ports.KubeletReadOnlyPort,        PreferredAddressTypes: []string{            // --override-hostname            string(api.NodeHostName),            // internal, preferring DNS if reported            string(api.NodeInternalDNS),            string(api.NodeInternalIP),            // external, preferring DNS if reported            string(api.NodeExternalDNS),            string(api.NodeExternalIP),        },        EnableHttps: true,        HTTPTimeout: time.Duration(5) * time.Second,    },    ServiceNodePortRange: DefaultServiceNodePortRange,}// Overwrite the default for storage data format.s.Etcd.DefaultStorageMediaType = &quot;application/vnd.kubernetes.protobuf&quot;// register all admission pluginsRegisterAllAdmissionPlugins(s.Admission.Plugins)// Set the default for admission plugins namess.Admission.PluginNames = []string{&quot;AlwaysAdmit&quot;}return &amp;s</code></pre><p>}</p><p>// AddFlags adds flags for a specific APIServer to the specified FlagSet<br>func (s <em>ServerRunOptions) AddFlags(fs </em>pflag.FlagSet) {<br>    // Add the generic flags.<br>    s.GenericServerRunOptions.AddUniversalFlags(fs)<br>    s.Etcd.AddFlags(fs)<br>    s.SecureServing.AddFlags(fs)<br>    s.SecureServing.AddDeprecatedFlags(fs)<br>    s.InsecureServing.AddFlags(fs)<br>    s.InsecureServing.AddDeprecatedFlags(fs)<br>    s.Audit.AddFlags(fs)<br>    s.Features.AddFlags(fs)<br>    s.Authentication.AddFlags(fs)<br>    s.Authorization.AddFlags(fs)<br>    s.CloudProvider.AddFlags(fs)<br>    s.StorageSerialization.AddFlags(fs)<br>    s.APIEnablement.AddFlags(fs)<br>    s.Admission.AddFlags(fs)</p><pre><code>// Note: the weird &quot;&quot;+ in below lines seems to be the only way to get gofmt to// arrange these text blocks sensibly. Grrr.fs.DurationVar(&amp;s.EventTTL, &quot;event-ttl&quot;, s.EventTTL,    &quot;Amount of time to retain events.&quot;)fs.BoolVar(&amp;s.AllowPrivileged, &quot;allow-privileged&quot;, s.AllowPrivileged,    &quot;If true, allow privileged containers. [default=false]&quot;)fs.BoolVar(&amp;s.EnableLogsHandler, &quot;enable-logs-handler&quot;, s.EnableLogsHandler,    &quot;If true, install a /logs handler for the apiserver logs.&quot;)fs.StringVar(&amp;s.SSHUser, &quot;ssh-user&quot;, s.SSHUser,    &quot;If non-empty, use secure SSH proxy to the nodes, using this user name&quot;)fs.StringVar(&amp;s.SSHKeyfile, &quot;ssh-keyfile&quot;, s.SSHKeyfile,    &quot;If non-empty, use secure SSH proxy to the nodes, using this user keyfile&quot;)fs.Int64Var(&amp;s.MaxConnectionBytesPerSec, &quot;max-connection-bytes-per-sec&quot;, s.MaxConnectionBytesPerSec, &quot;&quot;+    &quot;If non-zero, throttle each user connection to this number of bytes/sec. &quot;+    &quot;Currently only applies to long-running requests.&quot;)fs.IntVar(&amp;s.MasterCount, &quot;apiserver-count&quot;, s.MasterCount,    &quot;The number of apiservers running in the cluster, must be a positive number.&quot;)fs.StringVar(&amp;s.EndpointReconcilerType, &quot;alpha-endpoint-reconciler-type&quot;, string(s.EndpointReconcilerType),    &quot;Use an endpoint reconciler (&quot;+strings.Join(reconcilers.AllTypes.Names(), &quot;, &quot;)+&quot;)&quot;)// See #14282 for details on how to test/try this option out.// TODO: remove this comment once this option is tested in CI.fs.IntVar(&amp;s.KubernetesServiceNodePort, &quot;kubernetes-service-node-port&quot;, s.KubernetesServiceNodePort, &quot;&quot;+    &quot;If non-zero, the Kubernetes master service (which apiserver creates/maintains) will be &quot;+    &quot;of type NodePort, using this as the value of the port. If zero, the Kubernetes master &quot;+    &quot;service will be of type ClusterIP.&quot;)fs.IPNetVar(&amp;s.ServiceClusterIPRange, &quot;service-cluster-ip-range&quot;, s.ServiceClusterIPRange, &quot;&quot;+    &quot;A CIDR notation IP range from which to assign service cluster IPs. This must not &quot;+    &quot;overlap with any IP ranges assigned to nodes for pods.&quot;)fs.IPNetVar(&amp;s.ServiceClusterIPRange, &quot;portal-net&quot;, s.ServiceClusterIPRange,    &quot;DEPRECATED: see --service-cluster-ip-range instead.&quot;)fs.MarkDeprecated(&quot;portal-net&quot;, &quot;see --service-cluster-ip-range instead&quot;)fs.Var(&amp;s.ServiceNodePortRange, &quot;service-node-port-range&quot;, &quot;&quot;+    &quot;A port range to reserve for services with NodePort visibility. &quot;+    &quot;Example: &apos;30000-32767&apos;. Inclusive at both ends of the range.&quot;)fs.Var(&amp;s.ServiceNodePortRange, &quot;service-node-ports&quot;, &quot;DEPRECATED: see --service-node-port-range instead&quot;)fs.MarkDeprecated(&quot;service-node-ports&quot;, &quot;see --service-node-port-range instead&quot;)// Kubelet related flags:fs.BoolVar(&amp;s.KubeletConfig.EnableHttps, &quot;kubelet-https&quot;, s.KubeletConfig.EnableHttps,    &quot;Use https for kubelet connections.&quot;)fs.StringSliceVar(&amp;s.KubeletConfig.PreferredAddressTypes, &quot;kubelet-preferred-address-types&quot;, s.KubeletConfig.PreferredAddressTypes,    &quot;List of the preferred NodeAddressTypes to use for kubelet connections.&quot;)fs.UintVar(&amp;s.KubeletConfig.Port, &quot;kubelet-port&quot;, s.KubeletConfig.Port,    &quot;DEPRECATED: kubelet port.&quot;)fs.MarkDeprecated(&quot;kubelet-port&quot;, &quot;kubelet-port is deprecated and will be removed.&quot;)fs.UintVar(&amp;s.KubeletConfig.ReadOnlyPort, &quot;kubelet-read-only-port&quot;, s.KubeletConfig.ReadOnlyPort,    &quot;DEPRECATED: kubelet port.&quot;)fs.DurationVar(&amp;s.KubeletConfig.HTTPTimeout, &quot;kubelet-timeout&quot;, s.KubeletConfig.HTTPTimeout,    &quot;Timeout for kubelet operations.&quot;)fs.StringVar(&amp;s.KubeletConfig.CertFile, &quot;kubelet-client-certificate&quot;, s.KubeletConfig.CertFile,    &quot;Path to a client cert file for TLS.&quot;)fs.StringVar(&amp;s.KubeletConfig.KeyFile, &quot;kubelet-client-key&quot;, s.KubeletConfig.KeyFile,    &quot;Path to a client key file for TLS.&quot;)fs.StringVar(&amp;s.KubeletConfig.CAFile, &quot;kubelet-certificate-authority&quot;, s.KubeletConfig.CAFile,    &quot;Path to a cert file for the certificate authority.&quot;)// TODO: delete this flag as soon as we identify and fix all clients that send malformed updates, like #14126.fs.BoolVar(&amp;validation.RepairMalformedUpdates, &quot;repair-malformed-updates&quot;, validation.RepairMalformedUpdates, &quot;&quot;+    &quot;If true, server will do its best to fix the update request to pass the validation, &quot;+    &quot;e.g., setting empty UID in update request to its existing value. This flag can be turned off &quot;+    &quot;after we fix all the clients that send malformed updates.&quot;)fs.StringVar(&amp;s.ProxyClientCertFile, &quot;proxy-client-cert-file&quot;, s.ProxyClientCertFile, &quot;&quot;+    &quot;Client certificate used to prove the identity of the aggregator or kube-apiserver &quot;+    &quot;when it must call out during a request. This includes proxying requests to a user &quot;+    &quot;api-server and calling out to webhook admission plugins. It is expected that this &quot;+    &quot;cert includes a signature from the CA in the --requestheader-client-ca-file flag. &quot;+    &quot;That CA is published in the &apos;extension-apiserver-authentication&apos; configmap in &quot;+    &quot;the kube-system namespace. Components recieving calls from kube-aggregator should &quot;+    &quot;use that CA to perform their half of the mutual TLS verification.&quot;)fs.StringVar(&amp;s.ProxyClientKeyFile, &quot;proxy-client-key-file&quot;, s.ProxyClientKeyFile, &quot;&quot;+    &quot;Private key for the client certificate used to prove the identity of the aggregator or kube-apiserver &quot;+    &quot;when it must call out during a request. This includes proxying requests to a user &quot;+    &quot;api-server and calling out to webhook admission plugins.&quot;)fs.BoolVar(&amp;s.EnableAggregatorRouting, &quot;enable-aggregator-routing&quot;, s.EnableAggregatorRouting,    &quot;Turns on aggregator routing requests to endoints IP rather than cluster IP.&quot;)</code></pre><p>}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;src: /home/liuzekun/github/kubernetes/cmd/kube-apiserver/app/options/options.go&lt;/p&gt;
&lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
    
      <category term="k8s" scheme="http://xixiang230.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Docker api源码阅读</title>
    <link href="http://xixiang230.github.io/2017/09/12/Docker-api%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>http://xixiang230.github.io/2017/09/12/Docker-api源码阅读/</id>
    <published>2017-09-12T05:45:15.000Z</published>
    <updated>2017-12-31T13:37:12.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Engine-API"><a href="#Engine-API" class="headerlink" title="Engine API"></a>Engine API</h1><p>Engine API主要用于负责client端命令行与daemon之间的通信，也适用于第三方软件控制daemon。主要包含如下部分：</p><ol><li>api/swagger.yam: Swagger定义的API</li><li>api/types: client和server共有的types，包含各种对象、选项、响应等。大部分为人工编写，部分为Swagger定义。 </li><li>cli: client命令行</li><li>client: client命令行使用的Go client，可被第三方Go程序使用。</li><li>daemon: API的server</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Engine-API&quot;&gt;&lt;a href=&quot;#Engine-API&quot; class=&quot;headerlink&quot; title=&quot;Engine API&quot;&gt;&lt;/a&gt;Engine API&lt;/h1&gt;&lt;p&gt;Engine API主要用于负责client端命令行与daemon之间的通信
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://xixiang230.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker源码结构</title>
    <link href="http://xixiang230.github.io/2017/09/11/Docker%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84/"/>
    <id>http://xixiang230.github.io/2017/09/11/Docker源码结构/</id>
    <published>2017-09-11T06:05:01.000Z</published>
    <updated>2017-12-31T13:37:12.592Z</updated>
    
    <content type="html"><![CDATA[<p>.<br>├── api<br>│   ├── common.go<br>│   ├── common_unix.go<br>│   ├── common_windows.go<br>│   ├── errdefs<br>│   ├── README.md<br>│   ├── server<br>│   ├── swagger-gen.yaml<br>│   ├── swagger.yaml<br>│   ├── templates<br>│   └── types<br>├── AUTHORS<br>├── builder<br>│   ├── builder.go<br>│   ├── dockerfile<br>│   ├── dockerignore<br>│   ├── fscache<br>│   └── remotecontext<br>├── CHANGELOG.md<br>├── cli          //docker命令动作实现<br>│   ├── cobra.go<br>│   ├── config<br>│   ├── debug<br>│   ├── error.go<br>│   └── required.go<br>├── client<br>│   ├── build_prune.go<br>│   ├── checkpoint_create.go<br>│   ├── checkpoint_create_test.go<br>│   ├── checkpoint_delete.go<br>│   ├── checkpoint_delete_test.go<br>│   ├── checkpoint_list.go<br>│   ├── checkpoint_list_test.go<br>│   ├── client.go<br>│   ├── client_mock_test.go<br>│   ├── client_test.go<br>│   ├── client_unix.go<br>│   ├── client_windows.go<br>│   ├── config_create.go<br>│   ├── config_create_test.go<br>│   ├── config_inspect.go<br>│   ├── config_inspect_test.go<br>│   ├── config_list.go<br>│   ├── config_list_test.go<br>│   ├── config_remove.go<br>│   ├── config_remove_test.go<br>│   ├── config_update.go<br>│   ├── config_update_test.go<br>│   ├── container_attach.go<br>│   ├── container_commit.go<br>│   ├── container_commit_test.go<br>│   ├── container_copy.go<br>│   ├── container_copy_test.go<br>│   ├── container_create.go<br>│   ├── container_create_test.go<br>│   ├── container_diff.go<br>│   ├── container_diff_test.go<br>│   ├── container_exec.go<br>│   ├── container_exec_test.go<br>│   ├── container_export.go<br>│   ├── container_export_test.go<br>│   ├── container_inspect.go<br>│   ├── container_inspect_test.go<br>│   ├── container_kill.go<br>│   ├── container_kill_test.go<br>│   ├── container_list.go<br>│   ├── container_list_test.go<br>│   ├── container_logs.go<br>│   ├── container_logs_test.go<br>│   ├── container_pause.go<br>│   ├── container_pause_test.go<br>│   ├── container_prune.go<br>│   ├── container_prune_test.go<br>│   ├── container_remove.go<br>│   ├── container_remove_test.go<br>│   ├── container_rename.go<br>│   ├── container_rename_test.go<br>│   ├── container_resize.go<br>│   ├── container_resize_test.go<br>│   ├── container_restart.go<br>│   ├── container_restart_test.go<br>│   ├── container_start.go<br>│   ├── container_start_test.go<br>│   ├── container_stats.go<br>│   ├── container_stats_test.go<br>│   ├── container_stop.go<br>│   ├── container_stop_test.go<br>│   ├── container_top.go<br>│   ├── container_top_test.go<br>│   ├── container_unpause.go<br>│   ├── container_unpause_test.go<br>│   ├── container_update.go<br>│   ├── container_update_test.go<br>│   ├── container_wait.go<br>│   ├── container_wait_test.go<br>│   ├── disk_usage.go<br>│   ├── disk_usage_test.go<br>│   ├── distribution_inspect.go<br>│   ├── distribution_inspect_test.go<br>│   ├── errors.go<br>│   ├── events.go<br>│   ├── events_test.go<br>│   ├── hijack.go<br>│   ├── image_build.go<br>│   ├── image_build_test.go<br>│   ├── image_create.go<br>│   ├── image_create_test.go<br>│   ├── image_history.go<br>│   ├── image_history_test.go<br>│   ├── image_import.go<br>│   ├── image_import_test.go<br>│   ├── image_inspect.go<br>│   ├── image_inspect_test.go<br>│   ├── image_list.go<br>│   ├── image_list_test.go<br>│   ├── image_load.go<br>│   ├── image_load_test.go<br>│   ├── image_prune.go<br>│   ├── image_prune_test.go<br>│   ├── image_pull.go<br>│   ├── image_pull_test.go<br>│   ├── image_push.go<br>│   ├── image_push_test.go<br>│   ├── image_remove.go<br>│   ├── image_remove_test.go<br>│   ├── image_save.go<br>│   ├── image_save_test.go<br>│   ├── image_search.go<br>│   ├── image_search_test.go<br>│   ├── image_tag.go<br>│   ├── image_tag_test.go<br>│   ├── info.go<br>│   ├── info_test.go<br>│   ├── interface_experimental.go<br>│   ├── interface.go<br>│   ├── interface_stable.go<br>│   ├── login.go<br>│   ├── network_connect.go<br>│   ├── network_connect_test.go<br>│   ├── network_create.go<br>│   ├── network_create_test.go<br>│   ├── network_disconnect.go<br>│   ├── network_disconnect_test.go<br>│   ├── network_inspect.go<br>│   ├── network_inspect_test.go<br>│   ├── network_list.go<br>│   ├── network_list_test.go<br>│   ├── network_prune.go<br>│   ├── network_prune_test.go<br>│   ├── network_remove.go<br>│   ├── network_remove_test.go<br>│   ├── node_inspect.go<br>│   ├── node_inspect_test.go<br>│   ├── node_list.go<br>│   ├── node_list_test.go<br>│   ├── node_remove.go<br>│   ├── node_remove_test.go<br>│   ├── node_update.go<br>│   ├── node_update_test.go<br>│   ├── ping.go<br>│   ├── ping_test.go<br>│   ├── plugin_create.go<br>│   ├── plugin_disable.go<br>│   ├── plugin_disable_test.go<br>│   ├── plugin_enable.go<br>│   ├── plugin_enable_test.go<br>│   ├── plugin_inspect.go<br>│   ├── plugin_inspect_test.go<br>│   ├── plugin_install.go<br>│   ├── plugin_list.go<br>│   ├── plugin_list_test.go<br>│   ├── plugin_push.go<br>│   ├── plugin_push_test.go<br>│   ├── plugin_remove.go<br>│   ├── plugin_remove_test.go<br>│   ├── plugin_set.go<br>│   ├── plugin_set_test.go<br>│   ├── plugin_upgrade.go<br>│   ├── README.md<br>│   ├── request.go<br>│   ├── request_test.go<br>│   ├── secret_create.go<br>│   ├── secret_create_test.go<br>│   ├── secret_inspect.go<br>│   ├── secret_inspect_test.go<br>│   ├── secret_list.go<br>│   ├── secret_list_test.go<br>│   ├── secret_remove.go<br>│   ├── secret_remove_test.go<br>│   ├── secret_update.go<br>│   ├── secret_update_test.go<br>│   ├── service_create.go<br>│   ├── service_create_test.go<br>│   ├── service_inspect.go<br>│   ├── service_inspect_test.go<br>│   ├── service_list.go<br>│   ├── service_list_test.go<br>│   ├── service_logs.go<br>│   ├── service_logs_test.go<br>│   ├── service_remove.go<br>│   ├── service_remove_test.go<br>│   ├── service_update.go<br>│   ├── service_update_test.go<br>│   ├── session.go<br>│   ├── swarm_get_unlock_key.go<br>│   ├── swarm_get_unlock_key_test.go<br>│   ├── swarm_init.go<br>│   ├── swarm_init_test.go<br>│   ├── swarm_inspect.go<br>│   ├── swarm_inspect_test.go<br>│   ├── swarm_join.go<br>│   ├── swarm_join_test.go<br>│   ├── swarm_leave.go<br>│   ├── swarm_leave_test.go<br>│   ├── swarm_unlock.go<br>│   ├── swarm_unlock_test.go<br>│   ├── swarm_update.go<br>│   ├── swarm_update_test.go<br>│   ├── task_inspect.go<br>│   ├── task_inspect_test.go<br>│   ├── task_list.go<br>│   ├── task_list_test.go<br>│   ├── task_logs.go<br>│   ├── testdata<br>│   ├── tlsconfig_clone.go<br>│   ├── tlsconfig_clone_go17.go<br>│   ├── transport.go<br>│   ├── utils.go<br>│   ├── version.go<br>│   ├── volume_create.go<br>│   ├── volume_create_test.go<br>│   ├── volume_inspect.go<br>│   ├── volume_inspect_test.go<br>│   ├── volume_list.go<br>│   ├── volume_list_test.go<br>│   ├── volume_prune.go<br>│   ├── volume_remove.go<br>│   └── volume_remove_test.go<br>├── cmd<br>│   └── dockerd<br>├── container<br>│   ├── archive.go<br>│   ├── container.go<br>│   ├── container_linux.go<br>│   ├── container_notlinux.go<br>│   ├── container_unit_test.go<br>│   ├── container_unix.go<br>│   ├── container_windows.go<br>│   ├── env.go<br>│   ├── env_test.go<br>│   ├── health.go<br>│   ├── history.go<br>│   ├── memory_store.go<br>│   ├── memory_store_test.go<br>│   ├── monitor.go<br>│   ├── mounts_unix.go<br>│   ├── mounts_windows.go<br>│   ├── state.go<br>│   ├── state_solaris.go<br>│   ├── state_test.go<br>│   ├── state_unix.go<br>│   ├── state_windows.go<br>│   ├── store.go<br>│   ├── stream<br>│   ├── view.go<br>│   └── view_test.go<br>├── contrib<br>│   ├── apparmor<br>│   ├── builder<br>│   ├── check-config.sh<br>│   ├── desktop-integration<br>│   ├── docker-device-tool<br>│   ├── dockerize-disk.sh<br>│   ├── docker-machine-install-bundle.sh<br>│   ├── download-frozen-image-v1.sh<br>│   ├── download-frozen-image-v2.sh<br>│   ├── editorconfig<br>│   ├── gitdm<br>│   ├── httpserver<br>│   ├── init<br>│   ├── mac-install-bundle.sh<br>│   ├── mkimage<br>│   ├── mkimage-alpine.sh<br>│   ├── mkimage-archarm-pacman.conf<br>│   ├── mkimage-arch-pacman.conf<br>│   ├── mkimage-arch.sh<br>│   ├── mkimage-crux.sh<br>│   ├── mkimage-pld.sh<br>│   ├── mkimage.sh<br>│   ├── mkimage-yum.sh<br>│   ├── nnp-test<br>│   ├── nuke-graph-directory.sh<br>│   ├── project-stats.sh<br>│   ├── README.md<br>│   ├── report-issue.sh<br>│   ├── reprepro<br>│   ├── REVIEWERS<br>│   ├── selinux-fedora-24<br>│   ├── selinux-oraclelinux-7<br>│   ├── syntax<br>│   ├── syscall-test<br>│   ├── udev<br>│   └── vagrant-docker<br>├── CONTRIBUTING.md<br>├── daemon         //<br>│   ├── apparmor_default.go<br>│   ├── apparmor_default_unsupported.go<br>│   ├── archive.go<br>│   ├── archive_tarcopyoptions.go<br>│   ├── archive_tarcopyoptions_unix.go<br>│   ├── archive_tarcopyoptions_windows.go<br>│   ├── archive_unix.go<br>│   ├── archive_windows.go<br>│   ├── attach.go<br>│   ├── auth.go<br>│   ├── bindmount_solaris.go<br>│   ├── bindmount_unix.go<br>│   ├── build.go<br>│   ├── cache.go<br>│   ├── caps<br>│   ├── changes.go<br>│   ├── checkpoint.go<br>│   ├── cluster<br>│   ├── cluster.go<br>│   ├── commit.go<br>│   ├── config<br>│   ├── configs.go<br>│   ├── configs_linux.go<br>│   ├── configs_unsupported.go<br>│   ├── configs_windows.go<br>│   ├── container.go<br>│   ├── container_linux.go<br>│   ├── container_operations.go<br>│   ├── container_operations_solaris.go<br>│   ├── container_operations_unix.go<br>│   ├── container_operations_windows.go<br>│   ├── container_windows.go<br>│   ├── create.go<br>│   ├── create_unix.go<br>│   ├── create_windows.go<br>│   ├── daemon_experimental.go<br>│   ├── daemon.go<br>│   ├── daemon_linux.go<br>│   ├── daemon_linux_test.go<br>│   ├── daemon_solaris.go<br>│   ├── daemon_test.go<br>│   ├── daemon_unix.go<br>│   ├── daemon_unix_test.go<br>│   ├── daemon_unsupported.go<br>│   ├── daemon_windows.go<br>│   ├── debugtrap_unix.go<br>│   ├── debugtrap_unsupported.go<br>│   ├── debugtrap_windows.go<br>│   ├── delete.go<br>│   ├── delete_test.go<br>│   ├── dependency.go<br>│   ├── discovery<br>│   ├── disk_usage.go<br>│   ├── errors.go<br>│   ├── events<br>│   ├── events.go<br>│   ├── events_test.go<br>│   ├── exec<br>│   ├── exec.go<br>│   ├── exec_linux.go<br>│   ├── exec_solaris.go<br>│   ├── exec_windows.go<br>│   ├── export.go<br>│   ├── getsize_unix.go<br>│   ├── graphdriver<br>│   ├── health.go<br>│   ├── health_test.go<br>│   ├── image_delete.go<br>│   ├── image_exporter.go<br>│   ├── image.go<br>│   ├── image_history.go<br>│   ├── image_inspect.go<br>│   ├── image_pull.go<br>│   ├── image_push.go<br>│   ├── images.go<br>│   ├── image_tag.go<br>│   ├── import.go<br>│   ├── info.go<br>│   ├── info_unix.go<br>│   ├── info_unix_test.go<br>│   ├── info_windows.go<br>│   ├── initlayer<br>│   ├── inspect.go<br>│   ├── inspect_solaris.go<br>│   ├── inspect_unix.go<br>│   ├── inspect_windows.go<br>│   ├── keys.go<br>│   ├── keys_unsupported.go<br>│   ├── kill.go<br>│   ├── links<br>│   ├── links.go<br>│   ├── listeners<br>│   ├── list.go<br>│   ├── list_unix.go<br>│   ├── list_windows.go<br>│   ├── logdrivers_linux.go<br>│   ├── logdrivers_windows.go<br>│   ├── logger<br>│   ├── logs.go<br>│   ├── logs_test.go<br>│   ├── metrics.go<br>│   ├── metrics_unix.go<br>│   ├── metrics_unsupported.go<br>│   ├── monitor.go<br>│   ├── monitor_linux.go<br>│   ├── monitor_solaris.go<br>│   ├── monitor_windows.go<br>│   ├── mounts.go<br>│   ├── names<br>│   ├── names.go<br>│   ├── network<br>│   ├── network.go<br>│   ├── oci_linux.go<br>│   ├── oci_solaris.go<br>│   ├── oci_windows.go<br>│   ├── pause.go<br>│   ├── prune.go<br>│   ├── reload.go<br>│   ├── reload_test.go<br>│   ├── rename.go<br>│   ├── resize.go<br>│   ├── restart.go<br>│   ├── search.go<br>│   ├── search_test.go<br>│   ├── seccomp_disabled.go<br>│   ├── seccomp_linux.go<br>│   ├── seccomp_unsupported.go<br>│   ├── secrets.go<br>│   ├── secrets_linux.go<br>│   ├── secrets_unsupported.go<br>│   ├── secrets_windows.go<br>│   ├── selinux_linux.go<br>│   ├── selinux_unsupported.go<br>│   ├── start.go<br>│   ├── start_unix.go<br>│   ├── start_windows.go<br>│   ├── stats<br>│   ├── stats_collector.go<br>│   ├── stats.go<br>│   ├── stats_unix.go<br>│   ├── stats_windows.go<br>│   ├── stop.go<br>│   ├── testdata<br>│   ├── top_unix.go<br>│   ├── top_unix_test.go<br>│   ├── top_windows.go<br>│   ├── trustkey.go<br>│   ├── trustkey_test.go<br>│   ├── unpause.go<br>│   ├── update.go<br>│   ├── update_linux.go<br>│   ├── update_solaris.go<br>│   ├── update_windows.go<br>│   ├── volumes.go<br>│   ├── volumes_unit_test.go<br>│   ├── volumes_unix.go<br>│   ├── volumes_unix_test.go<br>│   ├── volumes_windows.go<br>│   ├── wait.go<br>│   └── workdir.go<br>├── distribution<br>│   ├── config.go<br>│   ├── errors.go<br>│   ├── fixtures<br>│   ├── metadata<br>│   ├── pull.go<br>│   ├── pull_v1.go<br>│   ├── pull_v2.go<br>│   ├── pull_v2_test.go<br>│   ├── pull_v2_unix.go<br>│   ├── pull_v2_windows.go<br>│   ├── push.go<br>│   ├── push_v1.go<br>│   ├── push_v2.go<br>│   ├── push_v2_test.go<br>│   ├── registry.go<br>│   ├── registry_unit_test.go<br>│   ├── utils<br>│   └── xfer<br>├── Dockerfile<br>├── Dockerfile.aarch64<br>├── Dockerfile.armhf<br>├── Dockerfile.ppc64le<br>├── Dockerfile.s390x<br>├── Dockerfile.simple<br>├── Dockerfile.solaris<br>├── Dockerfile.windows<br>├── dockerversion<br>│   ├── useragent.go<br>│   └── version_lib.go<br>├── docs<br>│   ├── api<br>│   └── static_files<br>├── hack<br>│   ├── dind<br>│   ├── dockerfile<br>│   ├── generate-authors.sh<br>│   ├── generate-swagger-api.sh<br>│   ├── integration-cli-on-swarm<br>│   ├── Jenkins<br>│   ├── make<br>│   ├── make.ps1<br>│   ├── make.sh<br>│   ├── README.md<br>│   ├── release.sh<br>│   ├── test<br>│   ├── validate<br>│   └── vendor.sh<br>├── image<br>│   ├── cache<br>│   ├── fs.go<br>│   ├── fs_test.go<br>│   ├── image.go<br>│   ├── image_test.go<br>│   ├── rootfs.go<br>│   ├── spec<br>│   ├── store.go<br>│   ├── store_test.go<br>│   ├── tarexport<br>│   └── v1<br>├── integration<br>│   ├── container<br>│   ├── doc.go<br>│   ├── service<br>│   └── util<br>├── integration-cli<br>│   ├── benchmark_test.go<br>│   ├── checker<br>│   ├── check_test.go<br>│   ├── cli<br>│   ├── daemon<br>│   ├── daemon_swarm_hack_test.go<br>│   ├── docker_api_attach_test.go<br>│   ├── docker_api_auth_test.go<br>│   ├── docker_api_build_test.go<br>│   ├── docker_api_containers_test.go<br>│   ├── docker_api_containers_windows_test.go<br>│   ├── docker_api_create_test.go<br>│   ├── docker_api_events_test.go<br>│   ├── docker_api_exec_resize_test.go<br>│   ├── docker_api_exec_test.go<br>│   ├── docker_api_images_test.go<br>│   ├── docker_api_info_test.go<br>│   ├── docker_api_inspect_test.go<br>│   ├── docker_api_inspect_unix_test.go<br>│   ├── docker_api_ipcmode_test.go<br>│   ├── docker_api_logs_test.go<br>│   ├── docker_api_network_test.go<br>│   ├── docker_api_resize_test.go<br>│   ├── docker_api_session_test.go<br>│   ├── docker_api_stats_test.go<br>│   ├── docker_api_stats_unix_test.go<br>│   ├── docker_api_swarm_config_test.go<br>│   ├── docker_api_swarm_node_test.go<br>│   ├── docker_api_swarm_secret_test.go<br>│   ├── docker_api_swarm_service_test.go<br>│   ├── docker_api_swarm_test.go<br>│   ├── docker_api_test.go<br>│   ├── docker_api_update_unix_test.go<br>│   ├── docker_api_version_test.go<br>│   ├── docker_api_volumes_test.go<br>│   ├── docker_cli_attach_test.go<br>│   ├── docker_cli_attach_unix_test.go<br>│   ├── docker_cli_authz_plugin_v2_test.go<br>│   ├── docker_cli_authz_unix_test.go<br>│   ├── docker_cli_build_test.go<br>│   ├── docker_cli_build_unix_test.go<br>│   ├── docker_cli_by_digest_test.go<br>│   ├── docker_cli_commit_test.go<br>│   ├── docker_cli_config_create_test.go<br>│   ├── docker_cli_config_inspect_test.go<br>│   ├── docker_cli_config_ls_test.go<br>│   ├── docker_cli_cp_from_container_test.go<br>│   ├── docker_cli_cp_test.go<br>│   ├── docker_cli_cp_to_container_test.go<br>│   ├── docker_cli_cp_to_container_unix_test.go<br>│   ├── docker_cli_cp_utils_test.go<br>│   ├── docker_cli_create_test.go<br>│   ├── docker_cli_create_unix_test.go<br>│   ├── docker_cli_daemon_plugins_test.go<br>│   ├── docker_cli_daemon_test.go<br>│   ├── docker_cli_diff_test.go<br>│   ├── docker_cli_events_test.go<br>│   ├── docker_cli_events_unix_test.go<br>│   ├── docker_cli_exec_test.go<br>│   ├── docker_cli_exec_unix_test.go<br>│   ├── docker_cli_experimental_test.go<br>│   ├── docker_cli_export_import_test.go<br>│   ├── docker_cli_external_graphdriver_unix_test.go<br>│   ├── docker_cli_external_volume_driver_unix_test.go<br>│   ├── docker_cli_health_test.go<br>│   ├── docker_cli_history_test.go<br>│   ├── docker_cli_images_test.go<br>│   ├── docker_cli_import_test.go<br>│   ├── docker_cli_info_test.go<br>│   ├── docker_cli_info_unix_test.go<br>│   ├── docker_cli_inspect_test.go<br>│   ├── docker_cli_kill_test.go<br>│   ├── docker_cli_links_test.go<br>│   ├── docker_cli_links_unix_test.go<br>│   ├── docker_cli_login_test.go<br>│   ├── docker_cli_logout_test.go<br>│   ├── docker_cli_logs_bench_test.go<br>│   ├── docker_cli_logs_test.go<br>│   ├── docker_cli_nat_test.go<br>│   ├── docker_cli_netmode_test.go<br>│   ├── docker_cli_network_unix_test.go<br>│   ├── docker_cli_oom_killed_test.go<br>│   ├── docker_cli_pause_test.go<br>│   ├── docker_cli_plugins_logdriver_test.go<br>│   ├── docker_cli_plugins_test.go<br>│   ├── docker_cli_port_test.go<br>│   ├── docker_cli_proxy_test.go<br>│   ├── docker_cli_prune_unix_test.go<br>│   ├── docker_cli_ps_test.go<br>│   ├── docker_cli_pull_local_test.go<br>│   ├── docker_cli_pull_test.go<br>│   ├── docker_cli_pull_trusted_test.go<br>│   ├── docker_cli_push_test.go<br>│   ├── docker_cli_registry_user_agent_test.go<br>│   ├── docker_cli_rename_test.go<br>│   ├── docker_cli_restart_test.go<br>│   ├── docker_cli_rmi_test.go<br>│   ├── docker_cli_rm_test.go<br>│   ├── docker_cli_run_test.go<br>│   ├── docker_cli_run_unix_test.go<br>│   ├── docker_cli_save_load_test.go<br>│   ├── docker_cli_save_load_unix_test.go<br>│   ├── docker_cli_search_test.go<br>│   ├── docker_cli_secret_create_test.go<br>│   ├── docker_cli_secret_inspect_test.go<br>│   ├── docker_cli_secret_ls_test.go<br>│   ├── docker_cli_service_create_test.go<br>│   ├── docker_cli_service_health_test.go<br>│   ├── docker_cli_service_logs_test.go<br>│   ├── docker_cli_service_scale_test.go<br>│   ├── docker_cli_service_update_test.go<br>│   ├── docker_cli_sni_test.go<br>│   ├── docker_cli_start_test.go<br>│   ├── docker_cli_stats_test.go<br>│   ├── docker_cli_stop_test.go<br>│   ├── docker_cli_swarm_test.go<br>│   ├── docker_cli_swarm_unix_test.go<br>│   ├── docker_cli_tag_test.go<br>│   ├── docker_cli_top_test.go<br>│   ├── docker_cli_update_test.go<br>│   ├── docker_cli_update_unix_test.go<br>│   ├── docker_cli_userns_test.go<br>│   ├── docker_cli_v2_only_test.go<br>│   ├── docker_cli_version_test.go<br>│   ├── docker_cli_volume_test.go<br>│   ├── docker_cli_wait_test.go<br>│   ├── docker_deprecated_api_v124_test.go<br>│   ├── docker_deprecated_api_v124_unix_test.go<br>│   ├── docker_experimental_network_test.go<br>│   ├── docker_hub_pull_suite_test.go<br>│   ├── docker_utils_test.go<br>│   ├── environment<br>│   ├── events_utils_test.go<br>│   ├── fixtures<br>│   ├── fixtures_linux_daemon_test.go<br>│   ├── registry<br>│   ├── request<br>│   ├── requirement<br>│   ├── requirements_test.go<br>│   ├── requirements_unix_test.go<br>│   ├── test_vars_exec_test.go<br>│   ├── test_vars_noexec_test.go<br>│   ├── test_vars_noseccomp_test.go<br>│   ├── test_vars_seccomp_test.go<br>│   ├── test_vars_test.go<br>│   ├── test_vars_unix_test.go<br>│   ├── test_vars_windows_test.go<br>│   ├── trust_server_test.go<br>│   └── utils_test.go<br>├── internal<br>│   ├── test<br>│   └── testutil<br>├── layer<br>│   ├── empty.go<br>│   ├── empty_test.go<br>│   ├── filestore.go<br>│   ├── filestore_test.go<br>│   ├── filestore_unix.go<br>│   ├── filestore_windows.go<br>│   ├── layer.go<br>│   ├── layer_store.go<br>│   ├── layer_store_windows.go<br>│   ├── layer_test.go<br>│   ├── layer_unix.go<br>│   ├── layer_unix_test.go<br>│   ├── layer_windows.go<br>│   ├── migration.go<br>│   ├── migration_test.go<br>│   ├── mounted_layer.go<br>│   ├── mount_test.go<br>│   ├── ro_layer.go<br>│   ├── ro_layer_unix.go<br>│   └── ro_layer_windows.go<br>├── libcontainerd<br>│   ├── client.go<br>│   ├── client_linux.go<br>│   ├── client_solaris.go<br>│   ├── client_unix.go<br>│   ├── client_windows.go<br>│   ├── container.go<br>│   ├── container_unix.go<br>│   ├── container_windows.go<br>│   ├── oom_linux.go<br>│   ├── oom_solaris.go<br>│   ├── pausemonitor_unix.go<br>│   ├── process.go<br>│   ├── process_unix.go<br>│   ├── process_windows.go<br>│   ├── queue_unix.go<br>│   ├── queue_unix_test.go<br>│   ├── remote.go<br>│   ├── remote_unix.go<br>│   ├── remote_windows.go<br>│   ├── types.go<br>│   ├── types_linux.go<br>│   ├── types_solaris.go<br>│   ├── types_windows.go<br>│   ├── utils_linux.go<br>│   ├── utils_solaris.go<br>│   ├── utils_windows.go<br>│   └── utils_windows_test.go<br>├── LICENSE<br>├── MAINTAINERS<br>├── Makefile<br>├── migrate<br>│   └── v1<br>├── NOTICE<br>├── oci<br>│   ├── defaults.go<br>│   ├── devices_linux.go<br>│   ├── devices_unsupported.go<br>│   └── namespaces.go<br>├── opts<br>│   ├── env.go<br>│   ├── env_test.go<br>│   ├── hosts.go<br>│   ├── hosts_test.go<br>│   ├── hosts_unix.go<br>│   ├── hosts_windows.go<br>│   ├── ip.go<br>│   ├── ip_test.go<br>│   ├── opts.go<br>│   ├── opts_test.go<br>│   ├── opts_unix.go<br>│   ├── opts_windows.go<br>│   ├── quotedstring.go<br>│   ├── quotedstring_test.go<br>│   ├── runtime.go<br>│   ├── ulimit.go<br>│   └── ulimit_test.go<br>├── pkg<br>│   ├── aaparser<br>│   ├── archive<br>│   ├── authorization<br>│   ├── broadcaster<br>│   ├── chrootarchive<br>│   ├── devicemapper<br>│   ├── directory<br>│   ├── discovery<br>│   ├── filenotify<br>│   ├── fileutils<br>│   ├── fsutils<br>│   ├── homedir<br>│   ├── idtools<br>│   ├── ioutils<br>│   ├── jsonlog<br>│   ├── jsonmessage<br>│   ├── locker<br>│   ├── longpath<br>│   ├── loopback<br>│   ├── mount<br>│   ├── namesgenerator<br>│   ├── parsers<br>│   ├── pidfile<br>│   ├── platform<br>│   ├── plugingetter<br>│   ├── plugins<br>│   ├── pools<br>│   ├── progress<br>│   ├── promise<br>│   ├── pubsub<br>│   ├── README.md<br>│   ├── reexec<br>│   ├── signal<br>│   ├── stdcopy<br>│   ├── streamformatter<br>│   ├── stringid<br>│   ├── stringutils<br>│   ├── symlink<br>│   ├── sysinfo<br>│   ├── system<br>│   ├── tailfile<br>│   ├── tarsum<br>│   ├── term<br>│   ├── testutil<br>│   ├── truncindex<br>│   ├── urlutil<br>│   └── useragent<br>├── plugin<br>│   ├── backend_linux.go<br>│   ├── backend_unsupported.go<br>│   ├── blobstore.go<br>│   ├── defs.go<br>│   ├── errors.go<br>│   ├── events.go<br>│   ├── manager.go<br>│   ├── manager_linux.go<br>│   ├── manager_solaris.go<br>│   ├── manager_test.go<br>│   ├── manager_windows.go<br>│   ├── store.go<br>│   ├── store_test.go<br>│   └── v2<br>├── poule.yml<br>├── profiles<br>│   ├── apparmor<br>│   └── seccomp<br>├── project<br>│   ├── ARM.md<br>│   ├── BRANCHES-AND-TAGS.md<br>│   ├── CONTRIBUTING.md -&gt; ../CONTRIBUTING.md<br>│   ├── GOVERNANCE.md<br>│   ├── IRC-ADMINISTRATION.md<br>│   ├── ISSUE-TRIAGE.md<br>│   ├── PACKAGE-REPO-MAINTENANCE.md<br>│   ├── PACKAGERS.md<br>│   ├── PATCH-RELEASES.md<br>│   ├── PRINCIPLES.md<br>│   ├── README.md<br>│   ├── RELEASE-CHECKLIST.md<br>│   ├── RELEASE-PROCESS.md<br>│   ├── REVIEWING.md<br>│   └── TOOLS.md<br>├── README.md<br>├── reference<br>│   ├── errors.go<br>│   ├── store.go<br>│   └── store_test.go<br>├── registry<br>│   ├── auth.go<br>│   ├── auth_test.go<br>│   ├── config.go<br>│   ├── config_test.go<br>│   ├── config_unix.go<br>│   ├── config_windows.go<br>│   ├── endpoint_test.go<br>│   ├── endpoint_v1.go<br>│   ├── errors.go<br>│   ├── registry.go<br>│   ├── registry_mock_test.go<br>│   ├── registry_test.go<br>│   ├── resumable<br>│   ├── service.go<br>│   ├── service_v1.go<br>│   ├── service_v1_test.go<br>│   ├── service_v2.go<br>│   ├── session.go<br>│   └── types.go<br>├── reports<br>│   ├── 2017-05-01.md<br>│   ├── 2017-05-08.md<br>│   ├── 2017-05-15.md<br>│   ├── 2017-06-05.md<br>│   ├── 2017-06-12.md<br>│   ├── 2017-06-26.md<br>│   └── builder<br>├── restartmanager<br>│   ├── restartmanager.go<br>│   └── restartmanager_test.go<br>├── ROADMAP.md<br>├── runconfig<br>│   ├── config.go<br>│   ├── config_test.go<br>│   ├── config_unix.go<br>│   ├── config_windows.go<br>│   ├── errors.go<br>│   ├── fixtures<br>│   ├── hostconfig.go<br>│   ├── hostconfig_solaris.go<br>│   ├── hostconfig_test.go<br>│   ├── hostconfig_unix.go<br>│   ├── hostconfig_windows.go<br>│   ├── hostconfig_windows_test.go<br>│   └── opts<br>├── TESTING.md<br>├── vendor<br>│   ├── archive<br>│   ├── cloud.google.com<br>│   ├── github.com<br>│   ├── golang.org<br>│   └── google.golang.org<br>├── vendor.conf<br>├── VENDORING.md<br>├── VERSION<br>└── volume<br>    ├── drivers<br>    ├── local<br>    ├── store<br>    ├── testutils<br>    ├── validate.go<br>    ├── validate_test.go<br>    ├── validate_unix_test.go<br>    ├── validate_windows_test.go<br>    ├── volume_copy.go<br>    ├── volume_copy_unix.go<br>    ├── volume_copy_windows.go<br>    ├── volume.go<br>    ├── volume_linux.go<br>    ├── volume_linux_test.go<br>    ├── volume_propagation_linux.go<br>    ├── volume_propagation_linux_test.go<br>    ├── volume_propagation_unsupported.go<br>    ├── volume_test.go<br>    ├── volume_unix.go<br>    ├── volume_unsupported.go<br>    └── volume_windows.go</p><p>168 directories, 759 files</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;.&lt;br&gt;├── api&lt;br&gt;│   ├── common.go&lt;br&gt;│   ├── common_unix.go&lt;br&gt;│   ├── common_windows.go&lt;br&gt;│   ├── errdefs&lt;br&gt;│   ├── README.md&lt;br&gt;│   ├
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://xixiang230.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker源码分析之架构学习</title>
    <link href="http://xixiang230.github.io/2017/09/11/Docker%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xixiang230.github.io/2017/09/11/Docker源码分析之架构学习/</id>
    <published>2017-09-11T03:34:24.000Z</published>
    <updated>2017-12-31T13:37:12.591Z</updated>
    
    <content type="html"><![CDATA[<!-- vim-markdown-toc GFM --><ul><li><a href="#学习背景">学习背景</a></li><li><a href="#docker介绍">Docker介绍</a></li><li><a href="#docker架构">Docker架构</a><ul><li><a href="#dockerdaemon">DockerDaemon</a><ul><li><a href="#engine">Engine</a></li><li><a href="#job">Job</a></li></ul></li><li><a href="#driver">Driver</a></li><li><a href="#docker-container">Docker Container</a></li></ul></li></ul><!-- vim-markdown-toc --><h1 id="学习背景"><a href="#学习背景" class="headerlink" title="学习背景"></a>学习背景</h1><p>从今天开始Docker源码的学习和总结，以《Docker源码分析》一书的结构和解说为基础，配合其它资料学习，旨在弄懂每一个细节和概念。</p><h1 id="Docker介绍"><a href="#Docker介绍" class="headerlink" title="Docker介绍"></a>Docker介绍</h1><p>Docker借助操作系统层的虚拟化来实现资源隔离，因此在运行时，Docker容器与宿主机是共享同一操作系统的，不会产生额外的操作系统开销，从而可大大提高资源利用率和提升I/O性能。 </p><h1 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h1><p>Docker主要模块</p><ul><li>DockerClient</li><li>DockerDaemon</li><li>Docker Registry</li><li>Graph</li><li>Driver</li><li>libcontainer</li><li>Docker Container</li></ul><h2 id="DockerDaemon"><a href="#DockerDaemon" class="headerlink" title="DockerDaemon"></a>DockerDaemon</h2><ol><li>接收并处理Docker Client请求</li><li>管理所有的Docker容器</li></ol><p>DockerDaemon结构</p><ul><li>Docker Server</li><li>Engine</li><li>Job</li></ul><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><p>Engine存储大量的容器信息，管理Docker大部分Job的执行。</p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>Job是Engine内部最基本的工作执行单元。</p><h2 id="Driver"><a href="#Driver" class="headerlink" title="Driver"></a>Driver</h2><p>Docker Driver主要一下三类驱动：</p><ol><li>graphdriver：</li><li>networkdriver</li><li>execdriver</li></ol><h2 id="Docker-Container"><a href="#Docker-Container" class="headerlink" title="Docker Container"></a>Docker Container</h2><p>Docker<br>Container是Docker架构中服务交付的最终表现形式和交付单位，通过DockerDaemon的管理，libcontainer的执行，最终是创建出一个Docker容器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- vim-markdown-toc GFM --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#学习背景&quot;&gt;学习背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#docker介绍&quot;&gt;Docker介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#docker架构&quot;&gt;Docke
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://xixiang230.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Javascript之作用域</title>
    <link href="http://xixiang230.github.io/2016/10/18/Javascript%E4%B9%8B%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>http://xixiang230.github.io/2016/10/18/Javascript之作用域/</id>
    <published>2016-10-18T11:12:11.000Z</published>
    <updated>2017-12-31T13:37:12.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题的引出"><a href="#问题的引出" class="headerlink" title="问题的引出"></a>问题的引出</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'baidu'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'tecent'</span>;</span><br><span class="line">    alert(name);</span><br><span class="line">    alert(age);</span><br><span class="line">&#125;</span><br><span class="line">print()</span><br></pre></td></tr></table></figure><a id="more"></a><p>运行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">tecent</span><br><span class="line">[脚本出错]</span><br></pre></td></tr></table></figure></p><h1 id="JavaScript的作用域链"><a href="#JavaScript的作用域链" class="headerlink" title="JavaScript的作用域链"></a>JavaScript的作用域链</h1><p><blockquote><p>JavaScript中的函数运行在它们被定义的作用域里，而不是它们被执行(调用)的作用域里</p></blockquote></p><p><blockquote><p>JavaScript中一切皆对象，包括函数也是对象</p></blockquote><br>JavaScript的语法风格和C/C++类似, 但作用域的实现却和C/C++不同，并非用“堆栈”方式，而是使用”列表”的方式：</p><ol><li>任何执行(函数调用)上下文时刻的作用域, 都是由作用域链(scope chain)来实现。</li><li>在一个函数被定义的时候, 会将它定义时刻的scope chain链接到这个函数对象的[[scope]]属性。</li><li>在一个函数对象被调用的时候，会创建一个活动对象, 对于每一个函数的形参，都命名为该活动对象的命名属性, 然后将这个活动对象做为此时的作用域链(scope chain)最前端, 并将这个函数对象的[[scope]]属性加入到scope chain中。举个栗子：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'baidu'</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line">func();</span><br></pre></td></tr></table></figure></li></ol><p>当在执行func的定义语句时，会创建关于这个函数对象的[[scope]]属性，该属性属于内部属性，只有JavaScript引擎才可以访问，并将[[scope]]属性链接到定义它的作用域链上。又因为func是定义在全局环境中，所以此时[[scope]]属性window active object。</p><p>当在调用func时，JavaScript引擎在预编译阶段为之创建一个活动对象和函数arguments属性(其值为数组形式，用于保存实参值)，假设该活动对象为funcObj，给funcObj对象添加两个命名属性funcObj.name，funcObj.age，对于每一个在这个函数中申明的局部变量和函数定义，都会作为活动对象的同名命名属性，然后将调用参数分别赋值给形参，对于缺失的调用参数赋值为undefined。最后该活动对象作为scope chain的最前端，并将func的[[scope]]属性加入到scope chain中。</p><p>有了这个作用域链，在执行标志符解析时，就会逆向查询当前scope chain列表的每一个活动对象的属性，如果找到同名就返回，找不到即意味着该标志符没有被定义。注意：因为函数对象的[[scope]]属性是在定义一个函数的时候决定的。而非在调用执行时候决定。所以就会出现第一节中，调用print()函数时，打印undefined。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'baidu'</span>;</span><br><span class="line">    <span class="keyword">var</span> intro = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;</span><br><span class="line">    retrun intro;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">app</span>(<span class="params">para</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = para;</span><br><span class="line">    <span class="keyword">var</span> func = factory();</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app(<span class="string">'tecent'</span>);</span><br></pre></td></tr></table></figure></p><p>当调用app(‘tecent’)时，scope chain由：{window全局活动对象}-&gt;{app活动对象} 组成。再刚进入app函数体时，app活动对象有一个arguments属性，两个值为undefined的属性:name和func，和一个值为’tecent’的属性para。此时scope chain为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[[scope chain]] = [</span><br><span class="line">&#123;</span><br><span class="line">    para: <span class="string">'tecent'</span>,</span><br><span class="line">    name: <span class="literal">undefined</span>,</span><br><span class="line">    func: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="built_in">arguments</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"> <span class="built_in">window</span> call object</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>当调用进入factory的函数体时，factory的scope chain为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[scope chain]] = [</span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="literal">undefined</span>,</span><br><span class="line">    intor: <span class="literal">undefined</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">window</span> call object</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>此时的作用域并不包含app的活动对象。在定义intro函数的时候，intor函数的[[scope]]为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[[scope chain]] = [</span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">'baidu'</span>,</span><br><span class="line">    intor: <span class="literal">undefined</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">window</span> call object</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>从factory函数返回以后，在app体内调用intor的时候，发生了标志符解析，此时的scope chain为:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[[scope chain]] = [</span><br><span class="line">&#123;</span><br><span class="line">    intro call object</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">'baidu'</span></span><br><span class="line">    intor: <span class="literal">undefined</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">window</span> call object</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>因为scope<br>chain中，并不包含factory活动对象，所以name标志符解析的结果应该factory活动对象中的name属性，也就是’baidu’。</p><h1 id="JavaScript预编译"><a href="#JavaScript预编译" class="headerlink" title="JavaScript预编译"></a>JavaScript预编译</h1><p>JavaScript是一种脚本语言，一边执行一遍翻译。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="keyword">typeof</span> eve); <span class="comment">//打印function</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">eve</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'badiu'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>alert之所以会打印function，是因为在JavaScript中，存在预编译过程，JavaScript在执行每一段代码前，都会预先处理var关键字和function定义式(函数定义式和函数表达式)</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题的引出&quot;&gt;&lt;a href=&quot;#问题的引出&quot; class=&quot;headerlink&quot; title=&quot;问题的引出&quot;&gt;&lt;/a&gt;问题的引出&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;baidu&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&#39;tecent&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alert(age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="Javascript" scheme="http://xixiang230.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>论文阅读之Build Your Own Music Recommender by Modeling Internet Radio Streams</title>
    <link href="http://xixiang230.github.io/2016/07/16/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E4%B9%8BBuild-Your-Own-Music-Recommender-by-Modeling-Internet-Radio-Streams/"/>
    <id>http://xixiang230.github.io/2016/07/16/论文阅读之Build-Your-Own-Music-Recommender-by-Modeling-Internet-Radio-Streams/</id>
    <published>2016-07-16T12:30:24.000Z</published>
    <updated>2017-12-31T13:37:12.595Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www2012.org/proceedings/proceedings/p1.pdf" target="_blank" rel="noopener">Build Your Own Music Recommender by Modeling Internet Radio Streams</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www2012.org/proceedings/proceedings/p1.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Build Your Own Music Recommender by Modeling I
      
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="推荐系统" scheme="http://xixiang230.github.io/tags/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>推荐算法笔记之综述篇</title>
    <link href="http://xixiang230.github.io/2016/07/16/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95%E9%98%85%E8%AF%BB%E6%AF%94%E8%BE%83%E4%B9%8B%E7%BB%BC%E8%BF%B0%E7%AF%87/"/>
    <id>http://xixiang230.github.io/2016/07/16/推荐算法阅读比较之综述篇/</id>
    <published>2016-07-16T09:31:13.000Z</published>
    <updated>2017-12-31T13:37:12.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="推荐算法的分类"><a href="#推荐算法的分类" class="headerlink" title="推荐算法的分类"></a>推荐算法的分类</h1><p><blockquote><p>推荐系统算法通常基于某类推荐模型而实现，负责获取和分析相关数据，对用户偏好进行预测完成推荐。</p></blockquote><br>推荐算法通常分为如下四大类:</p><h2 id="协同过滤推荐算法"><a href="#协同过滤推荐算法" class="headerlink" title="协同过滤推荐算法"></a>协同过滤推荐算法</h2><p>协同过滤推荐算法是通过在用户的一系列行为中寻找特定模式来产生用户特殊推荐的。其输入仅仅依赖与惯用数据，比如用户的评价，购买，下载等用户偏好行为。协同过滤推荐算法又分为如下类型:</p><ol><li>基于邻域的协同过滤(基于用户和基于项)  </li><li>基于模型的系统过滤(矩阵因子分解，受限玻尔兹曼机，贝叶斯网络等)<br>协同过滤推荐算法的优劣势列表</li></ol><table><thead><tr><th>优势</th><th>劣势</th><th>备注</th></tr></thead><tbody><tr><td>需要最小域</td><td>冷启动问题</td><td></td></tr><tr><td>不需要用户和项</td><td>需要标准化产品</td><td></td></tr><tr><td>大多数场景中都能产生足够好的结果</td><td>需要很高的用户和项的比例(1:10)</td><td></td></tr><tr><td></td><td>流行度偏见(有长尾的时候表现不够好)</td><td></td></tr><tr><td></td><td>难于提供解释</td><td></td></tr></tbody></table><h2 id="基于内容的推荐算法"><a href="#基于内容的推荐算法" class="headerlink" title="基于内容的推荐算法"></a>基于内容的推荐算法</h2><p>基于内容的推荐算法用于向用户推荐其过去喜欢的内容(元数据，描述，话题等)相似的项。其输入仅仅依赖于用户和项的内容和描述(除了惯用数据)。类型可分为:</p><ol><li>信息检索(例如tf-idf和Okapi BM 25)    </li><li>机器学习(例如朴素贝叶斯，支持向量机，决策树等)<br>基于内容的推荐算法的优劣势列表:</li></ol><table><thead><tr><th>优势</th><th>劣势</th><th>备注</th></tr></thead><tbody><tr><td>没有冷启动问题</td><td>项内容必须是机器可读的和有意义的</td><td></td></tr><tr><td>不需要惯用数据</td><td>容易归档用户</td><td></td></tr><tr><td>没有流行度偏见，可以推荐有罕见特性的项</td><td>很难有意外，缺少多样性</td><td></td></tr><tr><td>可以使用用户内容特性来提供解释</td><td>很难联合多个项的特征</td></tr></tbody></table><h2 id="混合推荐算法"><a href="#混合推荐算法" class="headerlink" title="混合推荐算法"></a>混合推荐算法</h2><p>混合推荐算法综合利用了协同过滤算法和基于内容的推荐算法各自的优点，同时抵消了各自的缺点。其输入是:同时使用用户和项内容特征与惯用数据，同时从两种输入类型中获益。有如下类型:</p><ol><li>加权  </li><li>交换</li><li>混合  </li><li>特征组合</li><li>案例  </li><li>特征增强</li><li>元层次<br>由于混合使用协同过滤推荐算法和基于内容的推荐算法，混合推荐算法综合了二者的特点，同时也引入了一定的复杂性，其优劣势列表如下:</li></ol><table><thead><tr><th>优势</th><th>劣势</th><th>备注</th></tr></thead><tbody><tr><td>没有冷启动问题</td><td>需要通过大量的工作才能得到正确的平衡</td><td></td></tr><tr><td>没有流行度偏见，可推荐有罕有特性的项</td><td></td><td></td></tr><tr><td>可产生意外，实现多样性</td><td></td></tr></tbody></table><h2 id="流行度推荐算法"><a href="#流行度推荐算法" class="headerlink" title="流行度推荐算法"></a>流行度推荐算法</h2><p>流行度推荐算法是一种推荐流行项的方法(例如最多下载，最多浏览，最大影响的项)，其输入为：使用惯用数据和项的内容（例如类目）</p><table><thead><tr><th>优势</th><th>劣势</th><th>备注</th></tr></thead><tbody><tr><td>相对容易实现</td><td>需要标准化产品</td><td></td></tr><tr><td>良好的基准算法</td><td>经常需要一些项的类型进行分类</td><td></td></tr><tr><td>有助于解决新用户冷启动问题</td><td>不会推荐新项(很少有机会被观测到)</td></tr></tbody></table><h2 id="高级非传统推荐算法"><a href="#高级非传统推荐算法" class="headerlink" title="高级非传统推荐算法"></a>高级非传统推荐算法</h2><p>主要有如下类型:</p><ol><li>深度学习</li><li>学习等级  </li><li>Multi-armed bandits(探索/开发)  </li><li>上下文感知推荐 </li><li>张量分解  </li><li>分解机  </li><li>社会推荐 </li><li>基于内容的推荐算法  </li><li>混合推荐算法  </li><li>流行度推荐算法<br>高级非传统推荐算法的优劣列表如下:</li></ol><table><thead><tr><th>优势</th><th>劣势</th><th>备注</th></tr></thead><tbody><tr><td>利于勉强维持最终性能百分点</td><td>难于理解</td><td></td></tr><tr><td>你可以说你正在使用渐进的方式缺乏推荐工具支持</td><td></td><td></td></tr><tr><td></td><td>没有为你的首歌推荐系统提供推荐的方式</td><td></td></tr></tbody></table><p><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;推荐算法的分类&quot;&gt;&lt;a href=&quot;#推荐算法的分类&quot; class=&quot;headerlink&quot; title=&quot;推荐算法的分类&quot;&gt;&lt;/a&gt;推荐算法的分类&lt;/h1&gt;&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;推荐系统算法通常基于某类推荐模型而实现，负责获取和分析相关数据，对用户
      
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="推荐算法" scheme="http://xixiang230.github.io/tags/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>提升SQL执行效率的书写方法</title>
    <link href="http://xixiang230.github.io/2016/07/16/%E6%8F%90%E5%8D%87SQL%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E7%9A%84%E4%B9%A6%E5%86%99%E6%96%B9%E6%B3%95/"/>
    <id>http://xixiang230.github.io/2016/07/16/提升SQL执行效率的书写方法/</id>
    <published>2016-07-16T04:14:20.000Z</published>
    <updated>2017-12-31T13:37:12.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="背景原理"><a href="#背景原理" class="headerlink" title="背景原理"></a>背景原理</h1><p>SQL语句是一个抽象概念，而不代表具体的实现。具体如何执行SQL在关系数据库中都有一个所谓的优化器实现，现代关系数据库的优化器是基于成本来选择具体执行步骤的，因此妨碍优化器选择最优执行步骤的SQL都不是好SQL。所有当尝试写性能优越的SQL时要坚持: Think like query optimizer, not like programmer，学会用数据库的方式来思考如何执行SQL。    </p><ol><li>尽量不要在where中包含子查询和出现各种花样百出的函数和运算等。</li><li>在过滤条件中，可以过滤掉最大数量记录的条件必须放在where子句的末尾。  </li><li>在where中尽量不要使用OR。</li><li>用EXISTS代替IN，用NOT EXISTS代替NOT IN。</li><li>避免在索引列上使用计算。  </li><li>用IN来代替OR。  </li><li>避免在索引列上使用IS NULL和IS NOT NULL。  </li><li>总是使用索引的第一个列。  </li><li>优化GROUP BY。  </li><li>避免带有LIKE参数的通配符。  </li><li>避免使用困难的正则表达式。  </li><li>尽量明确完成SQL语句，尽量少让数据库工作。比如写SELECT语句时，需要把查询的字段明确指出，不要使用SELECT <em>语句。这里数据库会将’</em>‘依次转换成所有列名，该工作通过查询数据字典完成，但该过程的时间成本可忽略不计。更多的耗时是在于:(a)读取多余的列可能导致索引的书签查找，当读取条目多时会无法使用特定索引。(b)如果用select * 作用于表连接，可能造成更大的成本开销。<br>14.<br>避免语句过大，大量的表join会导致中间结果不准确，从而限制优化器选择较好的执行计划。   </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;背景原理&quot;&gt;&lt;a href=&quot;#背景原理&quot; class=&quot;headerlink&quot; title=&quot;背景原理&quot;&gt;&lt;/a&gt;背景原理&lt;/h1&gt;&lt;p&gt;SQL语句是一个抽象概念，而不代表具体的实现。具体如何执行SQL在关系数据库中都有一个所谓的优化器实现，现代关系数据库的优化
      
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="SQL" scheme="http://xixiang230.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>jQuery中的unique和merge方法</title>
    <link href="http://xixiang230.github.io/2016/07/15/jQuery%E4%B8%AD%E7%9A%84unique%E5%92%8Cmerge%E6%96%B9%E6%B3%95/"/>
    <id>http://xixiang230.github.io/2016/07/15/jQuery中的unique和merge方法/</id>
    <published>2016-07-15T12:44:27.000Z</published>
    <updated>2017-12-31T13:37:12.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="unique用法"><a href="#unique用法" class="headerlink" title="$.unique用法"></a>$.unique用法</h1><p>jQuery.unique(array)函数将通过搜索数组对象，排序数组，并移除任何重复的元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.unique([<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">9</span>]); <span class="comment">//[9,4,7,5,2,1]   </span></span><br></pre></td></tr></table></figure></p><h1 id="merge用法"><a href="#merge用法" class="headerlink" title="$.merge用法"></a>$.merge用法</h1><p>jQuery.merge(firstArray, secondArray)函数用于修改第一个数组的内容，并将第二个数组的内容添加到第一个数组中。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.merge([<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>], [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]); <span class="comment">//[0,1,2,2,3,4]  </span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;unique用法&quot;&gt;&lt;a href=&quot;#unique用法&quot; class=&quot;headerlink&quot; title=&quot;$.unique用法&quot;&gt;&lt;/a&gt;$.unique用法&lt;/h1&gt;&lt;p&gt;jQuery.unique(array)函数将通过搜索数组对象，排序数组，并移除任何
      
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="jQuery" scheme="http://xixiang230.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>bootbox学习</title>
    <link href="http://xixiang230.github.io/2016/07/14/bootbox%E5%AD%A6%E4%B9%A0/"/>
    <id>http://xixiang230.github.io/2016/07/14/bootbox学习/</id>
    <published>2016-07-14T14:15:02.000Z</published>
    <updated>2017-12-31T13:37:12.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、bootbox对话框介绍"><a href="#一、bootbox对话框介绍" class="headerlink" title="一、bootbox对话框介绍"></a>一、bootbox对话框介绍</h1><h2 id="bootbox-alert的使用"><a href="#bootbox-alert的使用" class="headerlink" title="bootbox.alert的使用"></a>bootbox.alert的使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bootbox.alert(<span class="string">"Hello world !"</span>)</span><br><span class="line">bootbox.alert(message, callback)</span><br><span class="line">bootbox.alert(<span class="string">"Your message here..."</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*your callback code */</span>&#125;)  </span><br><span class="line">bootbox.alert(&#123;</span><br><span class="line">    size: <span class="string">'small'</span>,</span><br><span class="line">    message: <span class="string">'Your message here..",</span></span><br><span class="line"><span class="string">    callback: function() &#123;/*your callback code */ &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">bootbox.alert(&#123;</span></span><br><span class="line"><span class="string">    message: "I'</span>m alert!<span class="string">",</span></span><br><span class="line"><span class="string">    callback: function () &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="bootbox-alert的Usage表"><a href="#bootbox-alert的Usage表" class="headerlink" title="bootbox.alert的Usage表"></a>bootbox.alert的Usage表</h2><table><thead><tr><th>调用方式</th><th>显示方式</th></tr></thead><tbody><tr><td>bootbox.alert(str message)</td><td>默认是’OK’ button</td></tr><tr><td>bootbox.alert(str message, fn callback)</td><td>默认文本的button，在dismissal上调用callback</td></tr><tr><td>bootbox.alert(str message, str label)</td><td>可自定义button的文本</td></tr><tr><td>bootbox.alert(str message, str label, fn callback)</td><td>自定义button文本，且在dismissal上调用callback</td></tr></tbody></table><h2 id="bootbox-prompt的使用"><a href="#bootbox-prompt的使用" class="headerlink" title="bootbox.prompt的使用"></a>bootbox.prompt的使用</h2><p>prompt对话框提供一个用户输入元素input，键入escape对话框将会消失，点击cancel button回调函数将会被调用，如果用户点击cancels或dismissed对话框，且有回调函数，则将传给回调函数一个null值，否则将input元素中的文本传给回调函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bootbox.prompt(message, callback)</span><br><span class="line">bootbox.prompt(<span class="string">"Your message here..."</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">/*your callback code */</span>&#125;)</span><br><span class="line">bootbox.prompt(&#123;</span><br><span class="line">    size: <span class="string">'small'</span></span><br><span class="line">    message: <span class="string">'Your message here...'</span>,</span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;<span class="comment">/*your callback code*/</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">bootbox.prompt(<span class="string">"What is your name?"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (result === <span class="literal">null</span>) &#123;  <span class="comment">//默认值为null</span></span><br><span class="line">        <span class="comment">//prompt dismissed</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="bootbox-prompt的Usage表"><a href="#bootbox-prompt的Usage表" class="headerlink" title="bootbox.prompt的Usage表"></a>bootbox.prompt的Usage表</h2><table><thead><tr><th>调用方式</th><th>显示方式</th></tr></thead><tbody><tr><td>bootbox.prompt(str message)</td><td>具有默认的Cancel和OK button</td></tr><tr><td>bootbox.prompt(str message, fn callback)</td><td>callback invoked on dismissal</td></tr><tr><td>bootbox.prompt(str message, str cancel)</td><td>自定义cancel button的文本</td></tr><tr><td>bootbox.prompt(str message, str cancel, fn callback)</td><td>callback invoked on dismissal</td></tr><tr><td>bootbox.prompt(str message, str cancel, str confirm)</td><td>自定义cancel和confirm button的文本</td></tr><tr><td>bootbox.prompt(str message, str cancel, str confirm, fn callback)</td><td>加上回调</td></tr><tr><td>bootbox.prompt(str message, str cancel, str confrim, fn callback, str defaultValue</td><td>加上默认的prompt value</td></tr></tbody></table><h2 id="bootbox-confirm的使用"><a href="#bootbox-confirm的使用" class="headerlink" title="bootbox.confirm的使用"></a>bootbox.confirm的使用</h2><p>confirm对话框具有cancel和confirm button，键入escape关闭对话框，点击cancel<br>button将调用回调函数，如果有回调，当用户单击cancel或confirm<br>button时会相应地传递给回调false和true值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bootbox.confirm(message, callback)</span><br><span class="line">bootbox .confirm(<span class="string">"Are you sure?"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;&#125;);</span><br><span class="line">bootbox.confirm(&#123;</span><br><span class="line">    size: <span class="string">'small'</span>,</span><br><span class="line">    message: <span class="string">'Your message here...'</span>,</span><br><span class="line">    callback: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;<span class="comment">/*your callback code*/</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line">bootbox.dialog(options)</span><br></pre></td></tr></table></figure></p><h2 id="bootbox-confirm的Usage表"><a href="#bootbox-confirm的Usage表" class="headerlink" title="bootbox.confirm的Usage表"></a>bootbox.confirm的Usage表</h2><table><thead><tr><th>调用方式</th><th>显示方式</th></tr></thead><tbody><tr><td>bootbox.confirm(str message)</td><td>默认带’Cancel’和’OK’两个button</td></tr><tr><td>bootbox.confirm(str message, fn callback)</td><td>默认两个button，在dismissal上调用callback</td></tr><tr><td>bootbox.confirm(str message, str cancel</td><td>自定义cancel button的文本，confirm button 文本默认</td></tr><tr><td>bootbox.confirm(str message, str cancel, fn callback)</td><td>在dismissal上调用callback</td></tr><tr><td>bootbox.confirm(str message, str cancel, str confirm)</td><td>自定义cancel和confirm button的文本</td></tr><tr><td>bootbox.confirm(str message, str cancel, str confrim, fn callback)</td><td>在dismissal上调用callback</td></tr></tbody></table><h2 id="dialog-Usage表"><a href="#dialog-Usage表" class="headerlink" title="dialog Usage表"></a>dialog Usage表</h2><p>dialog是一个如你所愿可完全自定义对话框的方法。  </p><table><thead><tr><th>调用方式</th><th>显示方式</th></tr></thead><tbody><tr><td>bootbox.dialog(str message)</td><td>一个没有任何button的简单对话框</td></tr><tr><td>bootbox.dialog(str message, object handler)</td><td>Needs docs</td></tr><tr><td>bootbox.dialog(str message, arrar handlers)</td><td>Needs docs</td></tr><tr><td>bootbox.dialog(str message, arrar handlers, object options)</td><td>Needs docs</td></tr></tbody></table><h1 id="二、选项"><a href="#二、选项" class="headerlink" title="二、选项"></a>二、选项</h1><p>以下选项以Javascript对象的方式传递，且某些选项只针对特定的bootbox框类型有效。  </p><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>message(必选)</td><td>string或html element</td><td>对话框中显示的文本或html标记</td></tr><tr><td>title</td><td>string或html element</td><td>对话框标题，将置于<code>&lt;h4&gt;</code>元素中</td></tr><tr><td>message(必选)</td><td>string或html element</td><td>对话框中显示的文本或html标记</td></tr><tr><td>locale</td><td>string</td><td>该选项用于button上的标记(OK，CONFIRM，CANCEL，Default等)的表示语言，默认取值en，当前支持zh_CN zh_TW en等</td></tr><tr><td>callback</td><td>Function</td><td>除alert外其他形式的对话框必选，且alert的callback不支持传递参数，confirm和prompt的calllback则必须支持一个参数，用于接收对话框上的result，对于confirm是一个true或false值，对于prompt则是用户输入的值。</td></tr><tr><td>buttons(有默认值)</td><td>Object</td><td>形如: buttonName: {label: ‘Label Text’, callback: function () {} }。alert默认值为”ok”，confirm和prompt默认值是：”cancel”和”confirm”</td></tr><tr><td>size</td><td>string</td><td>可取的值有’large’和’small’，默认为null</td></tr><tr><td>className</td><td>string</td><td>对话框的class</td></tr><tr><td>animate</td><td>boolean</td><td>对话框进入和退出动态，默认值为true</td></tr><tr><td>closeButton</td><td>boolean</td><td>是否需要close button，默认值为true</td></tr></tbody></table><h1 id="三、方法"><a href="#三、方法" class="headerlink" title="三、方法"></a>三、方法</h1><table><thead><tr><th>调用方式</th><th>作用</th></tr></thead><tbody><tr><td>bootbox.hideAll()</td><td>隐藏所有当有处于active的bootbox对话框</td></tr><tr><td>bootbox.animate(boolean)</td><td>Indicate whether idalogs should animate in and out</td></tr><tr><td>bootbox.backdrop(string)</td><td>Set the dailog backdrop value</td></tr><tr><td>bootbox.classes(string)</td><td>给对话框加上自定义的类</td></tr><tr><td>bootbox.setIcons(object)</td><td>给OK Cancel Confirm等按钮增加icons</td></tr><tr><td>bootbox.setLocale(string)</td><td>给OK Cancel Confirm等按钮设置文本显示语言，可以是:en zh-CN等</td></tr><tr><td>bootbox.addLocale(object</td><td>自定义lacale</td></tr></tbody></table><p>详情参考<a href="http://bootboxjs.com/v3.x/documentation.html" target="_blank" rel="noopener">bootbox官网</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、bootbox对话框介绍&quot;&gt;&lt;a href=&quot;#一、bootbox对话框介绍&quot; class=&quot;headerlink&quot; title=&quot;一、bootbox对话框介绍&quot;&gt;&lt;/a&gt;一、bootbox对话框介绍&lt;/h1&gt;&lt;h2 id=&quot;bootbox-alert的使用&quot;&gt;&lt;a href=&quot;#bootbox-alert的使用&quot; class=&quot;headerlink&quot; title=&quot;bootbox.alert的使用&quot;&gt;&lt;/a&gt;bootbox.alert的使用&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bootbox.alert(&lt;span class=&quot;string&quot;&gt;&quot;Hello world !&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootbox.alert(message, callback)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootbox.alert(&lt;span class=&quot;string&quot;&gt;&quot;Your message here...&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;span class=&quot;comment&quot;&gt;/*your callback code */&lt;/span&gt;&amp;#125;)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootbox.alert(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    size: &lt;span class=&quot;string&quot;&gt;&#39;small&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message: &lt;span class=&quot;string&quot;&gt;&#39;Your message here..&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    callback: function() &amp;#123;/*your callback code */ &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;bootbox.alert(&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    message: &quot;I&#39;&lt;/span&gt;m alert!&lt;span class=&quot;string&quot;&gt;&quot;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    callback: function () &amp;#123;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="bootbox" scheme="http://xixiang230.github.io/tags/bootbox/"/>
    
  </entry>
  
  <entry>
    <title>Latent Factor算法</title>
    <link href="http://xixiang230.github.io/2016/07/13/Latent-Factor%E7%AE%97%E6%B3%95/"/>
    <id>http://xixiang230.github.io/2016/07/13/Latent-Factor算法/</id>
    <published>2016-07-13T00:30:14.000Z</published>
    <updated>2017-12-31T13:37:12.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h1><p>每个用户(user)都有自己偏好，比如小明偏好是喜欢带有小清新的，钢琴伴奏的，周杰伦等标签元素的音乐，当一首歌曲(item)带有<br>这些元素时，推荐系统就将这首歌推荐给小名，换句话说，就是用这些标签元素来连接用户(user)和音乐(item)，这些标签在推荐<br>系统中用专业术语来描述称之为(latent factor)。</p><h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><p>在现实生活中，每个用户的偏好标签元素各不相同，每首哥具备的标签属性也不一样。Latent Factor推荐算法需要计算如下两个矩阵：</p><ol><li><p>用户(user)-潜在因子矩阵Q<br>矩阵Q用于表示不同用户对于不同元素的偏好程度，取值0-1之间，1表示很喜欢，0表示不喜欢。Q矩阵形式如下：<br>|   |小清新|摇滚|钢琴伴奏|伤感|<br>|—|——|—-|——–|—-|<br>|小明|0.7|0.8|0.1|0.6|<br>|小王|0.9|0.0|0.4|0.2|<br>|小芳|0.7|0.3|0.6|0.1|</p></li><li><p>音乐(item)-潜在因子矩阵P<br>矩阵P用于表示每种音乐含有各种元素的成分，同样也取值0-1之间，表示与该标签元素的吻合度。<br>|   |小清新|摇滚|钢琴伴奏|伤感|<br>|—|——|—-|——–|—-|<br>|音乐1|0.9|0.8|0.1|0.0|<br>|音乐2|0.5|0.0|1.0|0.0|<br>|音乐3|0.4|0.3|0.6|0.1|</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法思想&quot;&gt;&lt;a href=&quot;#算法思想&quot; class=&quot;headerlink&quot; title=&quot;算法思想&quot;&gt;&lt;/a&gt;算法思想&lt;/h1&gt;&lt;p&gt;每个用户(user)都有自己偏好，比如小明偏好是喜欢带有小清新的，钢琴伴奏的，周杰伦等标签元素的音乐，当一首歌曲(item)
      
    
    </summary>
    
      <category term="技术" scheme="http://xixiang230.github.io/categories/technique/"/>
    
    
      <category term="推荐算法" scheme="http://xixiang230.github.io/tags/%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Mac环境下的GDB签证问题</title>
    <link href="http://xixiang230.github.io/2016/07/08/Mac%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84GDB%E7%AD%BE%E8%AF%81%E9%97%AE%E9%A2%98/"/>
    <id>http://xixiang230.github.io/2016/07/08/Mac环境下的GDB签证问题/</id>
    <published>2016-07-08T00:14:41.000Z</published>
    <updated>2017-12-31T13:37:12.593Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bootstrap表格固定单元格宽度</title>
    <link href="http://xixiang230.github.io/2016/06/27/bootstrap%E8%A1%A8%E6%A0%BC%E5%9B%BA%E5%AE%9A%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E5%BA%A6/"/>
    <id>http://xixiang230.github.io/2016/06/27/bootstrap表格固定单元格宽度/</id>
    <published>2016-06-27T12:27:58.000Z</published>
    <updated>2017-12-31T13:37:12.593Z</updated>
    
    <content type="html"><![CDATA[<p>bootstrap表格是自适应的，当自动计算的列宽不合适时，可通过colgroup来控制单元格的宽度，如果只定义了部分单元格的宽度，其他的单元格还是会自适应的调整。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;table class=&quot;table table-bordered table-striped&quot;&gt;</span><br><span class="line">    &lt;colgroup&gt;</span><br><span class="line">        &lt;col style&gt;</span><br><span class="line">        &lt;col style&gt;</span><br><span class="line">        &lt;col style&gt;</span><br><span class="line">        &lt;col style=&quot;width:10%;&quot;&gt;</span><br><span class="line">        &lt;col style&gt;</span><br><span class="line">        &lt;col style=&quot;width:20%;&quot;&gt;</span><br><span class="line">    &lt;/colgroup&gt;</span><br><span class="line">    &lt;thread&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;1&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;2&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;3&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;4&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;5&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;6&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thread&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;a&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;b&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;c&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;d&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;e&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;f&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;bootstrap表格是自适应的，当自动计算的列宽不合适时，可通过colgroup来控制单元格的宽度，如果只定义了部分单元格的宽度，其他的单元格还是会自适应的调整。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
    
      <category term="bootstrap" scheme="http://xixiang230.github.io/tags/bootstrap/"/>
    
  </entry>
  
</feed>
